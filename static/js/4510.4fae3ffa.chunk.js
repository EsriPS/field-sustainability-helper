"use strict";(self.webpackChunkfield_sustainability_helper=self.webpackChunkfield_sustainability_helper||[]).push([[4510],{151:function(e,t,n){function i(){return new Float32Array(4)}function a(e){var t=new Float32Array(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function o(e,t,n,i){var a=new Float32Array(4);return a[0]=e,a[1]=t,a[2]=n,a[3]=i,a}function r(){return i()}function l(){return o(1,1,1,1)}function s(){return o(1,0,0,0)}function u(){return o(0,1,0,0)}function c(){return o(0,0,1,0)}function f(){return o(0,0,0,1)}n.d(t,{a:function(){return a},c:function(){return i},f:function(){return o}});var v=r(),_=l(),d=s(),m=u(),p=c(),g=f();Object.freeze({__proto__:null,create:i,clone:a,fromValues:o,createView:function(e,t){return new Float32Array(e,t,4)},zeros:r,ones:l,unitX:s,unitY:u,unitZ:c,unitW:f,ZEROS:v,ONES:_,UNIT_X:d,UNIT_Y:m,UNIT_Z:p,UNIT_W:g})},75010:function(e,t,n){n.d(t,{U:function(){return ae}});var i=n(28959),a=n(1413),o=n(15671),r=n(43144),l=n(60136),s=n(54062),u=n(67997),c=n(25866),f=n(3886),v=n(8548),_=n(48673),d=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){var e;return(0,o.Z)(this,n),(e=t.apply(this,arguments))._desc={lut:{vsPath:"raster/lut",fsPath:"raster/lut",attributes:new Map([["a_position",0],["a_texcoord",1]])},stretch:{vsPath:"raster/stretch",fsPath:"raster/stretch",attributes:new Map([["a_position",0],["a_texcoord",1]])},hillshade:{vsPath:"raster/hillshade",fsPath:"raster/hillshade",attributes:new Map([["a_position",0],["a_texcoord",1]])}},e._rendererUniformInfos=new Map,e}return(0,r.Z)(n,[{key:"dispose",value:function(){this._quad&&this._quad.dispose()}},{key:"prepareState",value:function(e,t){var n=e.context;n.setBlendingEnabled(!0),n.setBlendFunctionSeparate(v.zi.ONE,v.zi.ONE_MINUS_SRC_ALPHA,v.zi.ONE,v.zi.ONE_MINUS_SRC_ALPHA),n.setColorMask(!0,!0,!0,!0),n.setStencilWriteMask(0),n.setStencilTestEnabled(!0),n.setStencilFunction(v.wb.EQUAL,t.stencilRef,255)}},{key:"draw",value:function(e,t){var n;if((0,u.qE)(t)&&!t.suspended){e.timeline.begin(this.name);var i=!(null!=(n=e.context.capabilities.textureFloat)&&n.textureFloatLinear);t.updateTexture(e);var a=this._getShaderVariations(t,i),o=e.painter.materialManager.getProgram(e,this._desc[t.symbolizerParameters.type],a);this._drawWithProgram(e.context,o,t),e.timeline.end(this.name)}}},{key:"_drawWithProgram",value:function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[0,0],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];this._quad||(this._quad=new c.Z(e,[0,0,1,0,0,1,1,1]));var l=n.symbolizerParameters,s=n.transformGrid,u=n.width,f=n.height,v=n.opacity,d=l.type;e.useProgram(t);var m=this._getShaderVariations(n),p=this._getUniformInfos(d,e,t,m),g=n.getTextures(),h=g.names,x=g.textures;(0,_.RA)(e,t,h,x);var y=(0,_.zS)(i,o),b=(0,_.Tc)(s,[u,f],[n.source.width,n.source.height],v,r);if((0,_.N9)(t,p,(0,a.Z)((0,a.Z)({u_coordScale:n.coordScale,u_dvsMat3:n.transforms.dvs},y),b)),l.colormap){var S=l.colormap,T=l.colormapOffset,C=(0,_.Ue)(S,T);(0,_.N9)(t,p,C)}if("stretch"===l.type){var I=(0,_.xW)(l);(0,_.N9)(t,p,I)}else if("hillshade"===l.type){var E=(0,_.Fm)(l);(0,_.N9)(t,p,E)}this._quad.draw()}},{key:"_getUniformInfos",value:function(e,t,n,i){var a=i.length>0?e+"-"+i.join("-"):e;if(this._rendererUniformInfos.has(a))return this._rendererUniformInfos.get(a);var o=(0,_.v)(t,n);return this._rendererUniformInfos.set(a,o),o}},{key:"_getShaderVariations",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=[],i=e.interpolation,a=e.symbolizerParameters,o=a.type,r=a.colormap;return"cubic"===i?n.push("bicubic"):"bilinear"===i&&"stretch"===o&&null!=r?(n.push("bilinear"),n.push("nnedge")):t&&"bilinear"===i&&n.push("bilinear"),e.isRendereredSource?n.push("noop"):r&&n.push("applyColormap"),e.transformGrid&&(n.push("applyProjection"),1===e.transformGrid.spacing[0]&&n.push("lookupProjection")),n}}]),n}(f.Z),m=n(57874),p=n(94109),g={nearest:{defines:[],samplingMode:v.cw.NEAREST,mips:!1},bilinear:{defines:[],samplingMode:v.cw.LINEAR,mips:!1},bicubic:{defines:["bicubic"],samplingMode:v.cw.LINEAR,mips:!1},trilinear:{defines:[],samplingMode:v.cw.LINEAR_MIPMAP_LINEAR,mips:!0}},h=function(e,t,n){if("dynamic"===n.samplingMode){var i=e.state,a=t.resolution/t.pixelRatio/i.resolution,o=Math.round(e.pixelRatio)!==e.pixelRatio,r=a>1.05||a<.95;return i.rotation||r||o||t.isSourceScaled||t.rotation?g.bilinear:g.nearest}return g[n.samplingMode]},x=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){var e;return(0,o.Z)(this,n),(e=t.apply(this,arguments))._desc={vsPath:"raster/bitmap",fsPath:"raster/bitmap",attributes:new Map([["a_position",0],["a_texcoord",1]])},e}return(0,r.Z)(n,[{key:"dispose",value:function(){this._quad&&this._quad.dispose()}},{key:"prepareState",value:function(e,t){var n=e.context;n.setBlendingEnabled(!0),"additive"===t.blendFunction?n.setBlendFunctionSeparate(v.zi.ONE,v.zi.ONE,v.zi.ONE,v.zi.ONE):n.setBlendFunctionSeparate(v.zi.ONE,v.zi.ONE_MINUS_SRC_ALPHA,v.zi.ONE,v.zi.ONE_MINUS_SRC_ALPHA),n.setColorMask(!0,!0,!0,!0),n.setStencilWriteMask(0),n.setStencilTestEnabled(!0),n.setStencilFunction(v.wb.EQUAL,t.stencilRef,255)}},{key:"draw",value:function(e,t){var n=e.context,i=e.renderingOptions,a=e.painter;if(t.source){e.timeline.begin(this.name),this._quad||(this._quad=new c.Z(n,[0,0,1,0,0,1,1,1]));var o=h(e,t,i),r=a.materialManager.getProgram(e,this._desc,o.defines),l=t.coordScale,s=t.computedOpacity,u=t.transforms;t.setSamplingProfile(o),t.bind(e.context,p.Ic),n.useProgram(r),r.setUniformMatrix3fv("u_dvsMat3",u.dvs),r.setUniform1i("u_texture",p.Ic),r.setUniform2fv("u_coordScale",l),r.setUniform1f("u_opacity",s),this._quad.draw(),e.timeline.end(this.name)}}}]),n}(f.Z),y=n(92026),b=n(151),S=n(46640),T=n(52120),C=n(96721),I=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){var e;return(0,o.Z)(this,n),(e=t.apply(this,arguments))._color=(0,b.f)(0,1,0,1),e}return(0,r.Z)(n,[{key:"dispose",value:function(){this._program&&this._program.dispose()}},{key:"prepareState",value:function(e){var t=e.context;t.setStencilTestEnabled(!0),t.setBlendingEnabled(!1),t.setFaceCullingEnabled(!1),t.setColorMask(!1,!1,!1,!1),t.setStencilOp(v.xS.KEEP,v.xS.KEEP,v.xS.REPLACE),t.setStencilWriteMask(255),t.setStencilFunction(v.wb.ALWAYS,0,255)}},{key:"draw",value:function(e,t){var n=e.context,i=e.state,a=(0,S.cM)("clip",{geometry:[{location:0,name:"a_pos",count:2,type:v.g.SHORT}]}),o=t.getVAO(n,i,a.attributes,a.bufferLayouts);(0,y.Wi)(o.indexBuffer)||(this._program||(this._program=(0,C.H)(n,T.O)),n.useProgram(this._program),this._program.setUniform2fv("u_coord_range",[1,1]),this._program.setUniform4fv("u_color",this._color),this._program.setUniformMatrix3fv("u_dvsMat3",i.displayMat3),n.bindVAO(o),n.drawElements(v.MX.TRIANGLES,o.indexBuffer.size,v.g.UNSIGNED_INT,0),n.bindVAO())}}]),n}(f.Z),E=n(60418),O=n(40655),D=n(37762),A=n(16889),P=n(23588),R=n(80613),M=n(73271),L=n(44070),N=n(45412),z=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){var e;return(0,o.Z)(this,n),(e=t.apply(this,arguments))._color=(0,b.f)(1,0,0,1),e._patternMatrix=(0,P.c)(),e._programOptions={id:!1,pattern:!1},e}return(0,r.Z)(n,[{key:"dispose",value:function(){this._vao&&(this._vao.dispose(),this._vao=null)}},{key:"drawMany",value:function(e,t){var n=e.context,i=e.painter,a=e.styleLayerUID;this._loadWGLResources(e);var o,r,l=e.displayLevel,s=e.styleLayer,u=s.backgroundMaterial,c=i.vectorTilesMaterialManager,f=s.getPaintValue("background-color",l),_=s.getPaintValue("background-opacity",l),d=s.getPaintValue("background-pattern",l),m=void 0!==d,g=f[3]*_,h=1|window.devicePixelRatio,x=e.spriteMosaic,b=h>p.a?2:1,S=e.drawPhase===R.jx.HITTEST,T=this._programOptions;T.id=S,T.pattern=m;var C=c.getMaterialProgram(n,u,T);if(n.bindVAO(this._vao),n.useProgram(C),m){var I=x.getMosaicItemPosition(d,!0);if((0,y.pC)(I)){var E=I.tl,O=I.br,P=I.page;o=O[0]-E[0],r=O[1]-E[1];var L=x.getPageSize(P);(0,y.pC)(L)&&(x.bind(n,v.cw.LINEAR,P,p.V4),C.setUniform4f("u_tlbr",E[0],E[1],O[0],O[1]),C.setUniform2fv("u_mosaicSize",L),C.setUniform1i("u_texture",p.V4))}C.setUniform1f("u_opacity",_)}else this._color[0]=g*f[0],this._color[1]=g*f[1],this._color[2]=g*f[2],this._color[3]=g,C.setUniform4fv("u_color",this._color);if(C.setUniform1f("u_depth",s.z||0),S){var N=(0,M.Au)(a+1);C.setUniform4fv("u_id",N)}var z,w=(0,D.Z)(t);try{for(w.s();!(z=w.n()).done;){var V=z.value;if(C.setUniform1f("u_coord_range",V.rangeX),C.setUniformMatrix3fv("u_dvsMat3",V.transforms.dvs),m){var U=Math.max(Math.pow(2,Math.round(l)-V.key.level),1),F=b*V.width*U,G=F/(0,A.fp)(o),k=F/(0,A.fp)(r);this._patternMatrix[0]=G,this._patternMatrix[4]=k,C.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}n.setStencilFunction(v.wb.EQUAL,V.stencilRef,255),n.drawArrays(v.MX.TRIANGLE_STRIP,0,4)}}catch(Z){w.e(Z)}finally{w.f()}}},{key:"_loadWGLResources",value:function(e){if(!this._vao){var t=e.context,n=e.styleLayer.backgroundMaterial,i=new Int8Array([0,0,1,0,0,1,1,1]),a=L.f.createVertex(t,v.l1.STATIC_DRAW,i),o=new N.U(t,n.getAttributeLocations(),n.getLayoutInfo(),{geometry:a});this._vao=o}}}]),n}(f.Z),w=n(21391),V=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){var e;return(0,o.Z)(this,n),(e=t.apply(this,arguments))._programOptions={id:!1},e}return(0,r.Z)(n,[{key:"dispose",value:function(){}},{key:"drawMany",value:function(e,t){var n=e.context,i=e.displayLevel,a=e.requiredLevel,o=e.state,r=e.drawPhase,l=e.painter,s=e.spriteMosaic,u=e.styleLayerUID;if(t.some((function(e){var t,n;return null!=(t=null==(n=e.layerData.get(u))?void 0:n.circleIndexCount)&&t}))){var c=e.styleLayer,f=c.circleMaterial,_=l.vectorTilesMaterialManager,d=c.getPaintValue("circle-translate",i),m=c.getPaintValue("circle-translate-anchor",i),p=r===R.jx.HITTEST,g=this._programOptions;g.id=p;var h=_.getMaterialProgram(n,f,g);n.useProgram(h),h.setUniformMatrix3fv("u_displayMat3",m===w.fD.VIEWPORT?o.displayMat3:o.displayViewMat3),h.setUniform2fv("u_circleTranslation",d),h.setUniform1f("u_depth",c.z),h.setUniform1f("u_antialiasingWidth",1.2);var x=-1;if(p){var b=(0,M.Au)(u+1);h.setUniform4fv("u_id",b)}var S,T=(0,D.Z)(t);try{for(T.s();!(S=T.n()).done;){var C=S.value;if(C.layerData.has(u)){C.key.level!==x&&(x=C.key.level,f.setDataUniforms(h,i,c,x,s));var I=C.layerData.get(u);if(I.circleIndexCount){I.prepareForRendering(n);var E=I.circleVertexArrayObject;(0,y.Wi)(E)||(n.bindVAO(E),h.setUniformMatrix3fv("u_dvsMat3",C.transforms.dvs),a!==C.key.level?n.setStencilFunction(v.wb.EQUAL,C.stencilRef,255):n.setStencilFunction(v.wb.GREATER,255,255),n.drawElements(v.MX.TRIANGLES,I.circleIndexCount,v.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*I.circleIndexStart),C.triangleCount+=I.circleIndexCount/3)}}}}catch(O){T.e(O)}finally{T.f()}}}}]),n}(f.Z),U=n(29439),F=1/65536,G=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){var e;return(0,o.Z)(this,n),(e=t.apply(this,arguments))._fillProgramOptions={id:!1,pattern:!1},e._outlineProgramOptions={id:!1},e}return(0,r.Z)(n,[{key:"dispose",value:function(){}},{key:"drawMany",value:function(e,t){var n,i=e.displayLevel,a=e.drawPhase,o=e.renderPass,r=e.spriteMosaic,l=e.styleLayerUID,s=!1,u=(0,D.Z)(t);try{for(u.s();!(n=u.n()).done;){var c=n.value;if(c.layerData.has(l)){var f=c.layerData.get(l);if(f.fillIndexCount>0||f.outlineIndexCount>0){s=!0;break}}}}catch(A){u.e(A)}finally{u.f()}if(s){var v,_=e.styleLayer,d=_.getPaintProperty("fill-pattern"),m=void 0!==d,p=m&&d.isDataDriven;if(m&&!p){var g=d.getValue(i);v=r.getMosaicItemPosition(g,!0)}var h=!m&&_.getPaintValue("fill-antialias",i),x=!0,y=1;if(!m){var b=_.getPaintProperty("fill-color"),S=_.getPaintProperty("fill-opacity");if(!(null!=b&&b.isDataDriven||null!=S&&S.isDataDriven)){var T=_.getPaintValue("fill-color",i);(y=_.getPaintValue("fill-opacity",i)*T[3])>=1&&(x=!1)}}if(!x||"opaque"!==o){var C;a===R.jx.HITTEST&&(C=(0,M.Au)(l+1));var I=_.getPaintValue("fill-translate",i),E=_.getPaintValue("fill-translate-anchor",i);(x||"translucent"!==o)&&this._drawFill(e,l,_,t,I,E,m,v,p,C);var O=!_.hasDataDrivenOutlineColor&&_.outlineUsesFillColor&&y<1;h&&"opaque"!==o&&!O&&this._drawOutline(e,l,_,t,I,E,C)}}}},{key:"_drawFill",value:function(e,t,n,i,a,o,r,l,s,u){if(!r||s||!(0,y.Wi)(l)){var c=e.context,f=e.displayLevel,_=e.state,d=e.drawPhase,m=e.painter,g=e.pixelRatio,h=e.spriteMosaic,x=n.fillMaterial,b=m.vectorTilesMaterialManager,S=g>p.a?2:1,T=d===R.jx.HITTEST,C=this._fillProgramOptions;C.id=T,C.pattern=r;var I=b.getMaterialProgram(c,x,C);if(c.useProgram(I),(0,y.pC)(l)){var E=l.page,O=h.getPageSize(E);(0,y.pC)(O)&&(h.bind(c,v.cw.LINEAR,E,p.V4),I.setUniform2fv("u_mosaicSize",O),I.setUniform1i("u_texture",p.V4))}I.setUniformMatrix3fv("u_displayMat3",o===w.fD.VIEWPORT?_.displayMat3:_.displayViewMat3),I.setUniform2fv("u_fillTranslation",a),I.setUniform1f("u_depth",n.z+F),T&&I.setUniform4fv("u_id",u);var A,P=-1,M=(0,D.Z)(i);try{for(M.s();!(A=M.n()).done;){var L=A.value;if(L.layerData.has(t)){L.key.level!==P&&(P=L.key.level,x.setDataUniforms(I,f,n,P,h));var N=L.layerData.get(t);if(N.fillIndexCount){N.prepareForRendering(c);var z=N.fillVertexArrayObject;if(!(0,y.Wi)(z)){if(c.bindVAO(z),I.setUniformMatrix3fv("u_dvsMat3",L.transforms.dvs),c.setStencilFunction(v.wb.EQUAL,L.stencilRef,255),r){var V=Math.max(Math.pow(2,Math.round(f)-L.key.level),1),G=L.rangeX/(S*L.width*V);I.setUniform1f("u_patternFactor",G)}if(s){var k=N.patternMap;if(!k)continue;var Z,B=(0,D.Z)(k);try{for(B.s();!(Z=B.n()).done;){var W=(0,U.Z)(Z.value,2),H=W[0],Y=W[1],X=h.getPageSize(H);(0,y.pC)(X)&&(h.bind(c,v.cw.LINEAR,H,p.V4),I.setUniform2fv("u_mosaicSize",X),I.setUniform1i("u_texture",p.V4),c.drawElements(v.MX.TRIANGLES,Y[1],v.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*Y[0]))}}catch(j){B.e(j)}finally{B.f()}}else c.drawElements(v.MX.TRIANGLES,N.fillIndexCount,v.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*N.fillIndexStart);L.triangleCount+=N.fillIndexCount/3}}}}}catch(j){M.e(j)}finally{M.f()}}}},{key:"_drawOutline",value:function(e,t,n,i,a,o,r){var l=e.context,s=e.displayLevel,u=e.state,c=e.drawPhase,f=e.painter,_=e.pixelRatio,d=e.spriteMosaic,m=n.outlineMaterial,p=f.vectorTilesMaterialManager,g=.75/_,h=c===R.jx.HITTEST,x=this._outlineProgramOptions;x.id=h;var b=p.getMaterialProgram(l,m,x);l.useProgram(b),b.setUniformMatrix3fv("u_displayMat3",o===w.fD.VIEWPORT?u.displayMat3:u.displayViewMat3),b.setUniform2fv("u_fillTranslation",a),b.setUniform1f("u_depth",n.z+F),b.setUniform1f("u_outline_width",g),h&&b.setUniform4fv("u_id",r);var S,T=-1,C=(0,D.Z)(i);try{for(C.s();!(S=C.n()).done;){var I=S.value;if(I.layerData.has(t)){I.key.level!==T&&(T=I.key.level,m.setDataUniforms(b,s,n,T,d));var E=I.layerData.get(t);if(E.prepareForRendering(l),E.outlineIndexCount){var O=E.outlineVertexArrayObject;(0,y.Wi)(O)||(l.bindVAO(O),b.setUniformMatrix3fv("u_dvsMat3",I.transforms.dvs),l.setStencilFunction(v.wb.EQUAL,I.stencilRef,255),l.drawElements(v.MX.TRIANGLES,E.outlineIndexCount,v.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*E.outlineIndexStart),I.triangleCount+=E.outlineIndexCount/3)}}}}catch(A){C.e(A)}finally{C.f()}}}]),n}(f.Z),k=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){var e;return(0,o.Z)(this,n),(e=t.apply(this,arguments))._programOptions={id:!1,pattern:!1,sdf:!1},e}return(0,r.Z)(n,[{key:"dispose",value:function(){}},{key:"drawMany",value:function(e,t){var n=e.context,i=e.displayLevel,a=e.state,o=e.drawPhase,r=e.painter,l=e.pixelRatio,s=e.spriteMosaic,u=e.styleLayerUID;if(t.some((function(e){var t,n;return null!=(t=null==(n=e.layerData.get(u))?void 0:n.lineIndexCount)&&t}))){var c,f,_=e.styleLayer,d=_.lineMaterial,m=r.vectorTilesMaterialManager,g=_.getPaintValue("line-translate",i),h=_.getPaintValue("line-translate-anchor",i),x=_.getPaintProperty("line-pattern"),b=void 0!==x,S=b&&x.isDataDriven;if(b&&!S){var T=x.getValue(i);c=s.getMosaicItemPosition(T)}var C=!1;if(!b){var I=_.getPaintProperty("line-dasharray");if(C=(f=void 0!==I)&&I.isDataDriven,f&&!C){var E=I.getValue(i),O=_.getDashKey(E,_.getLayoutValue("line-cap",i));c=s.getMosaicItemPosition(O)}}var A=1/l,P=o===R.jx.HITTEST,L=this._programOptions;L.id=P,L.pattern=b,L.sdf=f;var N=m.getMaterialProgram(n,d,L);if(n.useProgram(N),N.setUniformMatrix3fv("u_displayViewMat3",a.displayViewMat3),N.setUniformMatrix3fv("u_displayMat3",h===w.fD.VIEWPORT?a.displayMat3:a.displayViewMat3),N.setUniform2fv("u_lineTranslation",g),N.setUniform1f("u_depth",_.z),N.setUniform1f("u_antialiasing",A),P){var z=(0,M.Au)(u+1);N.setUniform4fv("u_id",z)}if(c&&(0,y.pC)(c)){var V=c.page,F=s.getPageSize(V);(0,y.pC)(F)&&(s.bind(n,v.cw.LINEAR,V,p.V4),N.setUniform2fv("u_mosaicSize",F),N.setUniform1i("u_texture",p.V4))}var G,k=-1,Z=(0,D.Z)(t);try{for(Z.s();!(G=Z.n()).done;){var B=G.value;if(B.layerData.has(u)){B.key.level!==k&&(k=B.key.level,d.setDataUniforms(N,i,_,k,s));var W=Math.pow(2,i-k)/l;N.setUniform1f("u_zoomFactor",W);var H=B.layerData.get(u);if(H.lineIndexCount){H.prepareForRendering(n);var Y=H.lineVertexArrayObject;if(!(0,y.Wi)(Y)){if(n.bindVAO(Y),N.setUniformMatrix3fv("u_dvsMat3",B.transforms.dvs),n.setStencilFunction(v.wb.EQUAL,B.stencilRef,255),S||C){var X=H.patternMap;if(!X)continue;var j,q=(0,D.Z)(X);try{for(q.s();!(j=q.n()).done;){var K=(0,U.Z)(j.value,2),J=K[0],Q=K[1],$=s.getPageSize(J);(0,y.pC)($)&&(s.bind(n,v.cw.LINEAR,J,p.V4),N.setUniform2fv("u_mosaicSize",$),N.setUniform1i("u_texture",p.V4),n.drawElements(v.MX.TRIANGLES,Q[1],v.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*Q[0]))}}catch(ee){q.e(ee)}finally{q.f()}}else n.drawElements(v.MX.TRIANGLES,H.lineIndexCount,v.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*H.lineIndexStart);B.triangleCount+=H.lineIndexCount/3}}}}}catch(ee){Z.e(ee)}finally{Z.f()}}}}]),n}(f.Z),Z=n(15245),B=n(46618),W=n(13200),H=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){var e;return(0,o.Z)(this,n),(e=t.apply(this,arguments))._iconProgramOptions={id:!1,sdf:!1},e._sdfProgramOptions={id:!1},e._spritesTextureSize=(0,Z.c)(),e}return(0,r.Z)(n,[{key:"dispose",value:function(){}},{key:"drawMany",value:function(e,t){var n,i=e.drawPhase,a=e.styleLayerUID,o=e.styleLayer;i===R.jx.HITTEST&&(n=(0,M.Au)(a+1)),this._drawIcons(e,o,t,n),this._drawText(e,o,t,n)}},{key:"_drawIcons",value:function(e,t,n,i){var a,o,r=e.context,l=e.displayLevel,s=e.drawPhase,u=e.painter,c=e.spriteMosaic,f=e.state,v=e.styleLayerUID,_=t.iconMaterial,d=u.vectorTilesMaterialManager,m=!1,g=(0,D.Z)(n);try{for(g.s();!(o=g.n()).done;){var h=o.value;if(h.layerData.has(v)&&(a=h.layerData.get(v)).iconPerPageElementsMap.size>0){m=!0;break}}}catch(H){g.e(H)}finally{g.f()}if(m){var x=t.getPaintValue("icon-translate",l),b=t.getPaintValue("icon-translate-anchor",l),S=t.getLayoutValue("icon-rotation-alignment",l);S===w.aF.AUTO&&(S=t.getLayoutValue("symbol-placement",l)===w.R.POINT?w.aF.VIEWPORT:w.aF.MAP);var T=S===w.aF.MAP,C=t.getLayoutValue("icon-keep-upright",l)&&T,I=a.isIconSDF,E=s===R.jx.HITTEST,O=this._iconProgramOptions;O.id=E,O.sdf=I;var A=d.getMaterialProgram(r,_,O);r.useProgram(A),A.setUniformMatrix3fv("u_displayViewMat3",S===w.aF.MAP?f.displayViewMat3:f.displayMat3),A.setUniformMatrix3fv("u_displayMat3",b===w.fD.VIEWPORT?f.displayMat3:f.displayViewMat3),A.setUniform2fv("u_iconTranslation",x),A.setUniform1f("u_depth",t.z),A.setUniform1f("u_mapRotation",(0,W.s5)(f.rotation)),A.setUniform1f("u_keepUpright",C?1:0),A.setUniform1f("u_level",10*l),A.setUniform1i("u_texture",p.V4),A.setUniform1f("u_fadeDuration",B.nN/1e3),E&&A.setUniform4fv("u_id",i);var P,M=-1,L=(0,D.Z)(n);try{for(L.s();!(P=L.n()).done;){var N=P.value;if(N.layerData.has(v)&&(N.key.level!==M&&(M=N.key.level,_.setDataUniforms(A,l,t,M,c)),0!==(a=N.layerData.get(v)).iconPerPageElementsMap.size)){a.prepareForRendering(r),a.updateOpacityInfo();var z=a.iconVertexArrayObject;if(!(0,y.Wi)(z)){r.bindVAO(z),A.setUniformMatrix3fv("u_dvsMat3",N.transforms.dvs),A.setUniform1f("u_time",(performance.now()-a.lastOpacityUpdate)/1e3);var V,F=(0,D.Z)(a.iconPerPageElementsMap);try{for(F.s();!(V=F.n()).done;){var G=(0,U.Z)(V.value,2),k=G[0],Z=G[1];this._renderIconRange(e,A,Z,k,N)}}catch(H){F.e(H)}finally{F.f()}}}}}catch(H){L.e(H)}finally{L.f()}}}},{key:"_renderIconRange",value:function(e,t,n,i,a){var o=e.context,r=e.spriteMosaic;this._spritesTextureSize[0]=r.getWidth(i)/4,this._spritesTextureSize[1]=r.getHeight(i)/4,t.setUniform2fv("u_mosaicSize",this._spritesTextureSize),r.bind(o,v.cw.LINEAR,i,p.V4),o.setStencilTestEnabled(!0),o.setStencilFunction(v.wb.GREATER,255,255),o.setStencilWriteMask(0),o.drawElements(v.MX.TRIANGLES,n[1],v.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*n[0]),a.triangleCount+=n[1]/3}},{key:"_drawText",value:function(e,t,n,i){var a,o,r=this,l=e.context,s=e.displayLevel,u=e.drawPhase,c=e.glyphMosaic,f=e.painter,_=e.pixelRatio,d=e.spriteMosaic,m=e.state,g=e.styleLayerUID,h=t.textMaterial,x=f.vectorTilesMaterialManager,b=!1,S=(0,D.Z)(n);try{for(S.s();!(o=S.n()).done;){var T=o.value;if(T.layerData.has(g)&&(a=T.layerData.get(g)).glyphPerPageElementsMap.size>0){b=!0;break}}}catch(q){S.e(q)}finally{S.f()}if(b){var C=t.getPaintProperty("text-opacity");if(!C||C.isDataDriven||0!==C.getValue(s)){var I=t.getPaintProperty("text-color"),E=!I||I.isDataDriven||I.getValue(s)[3]>0,O=t.getPaintProperty("text-halo-width"),A=t.getPaintProperty("text-halo-color"),P=(!O||O.isDataDriven||O.getValue(s)>0)&&(!A||A.isDataDriven||A.getValue(s)[3]>0);if(E||P){var M=t.getLayoutValue("text-rotation-alignment",s);M===w.aF.AUTO&&(M=t.getLayoutValue("symbol-placement",s)===w.R.POINT?w.aF.VIEWPORT:w.aF.MAP);var L=M===w.aF.MAP,N=t.getLayoutValue("text-keep-upright",s)&&L,z=u===R.jx.HITTEST,V=.8*3/_;this._glyphTextureSize||(this._glyphTextureSize=(0,Z.f)(c.width/4,c.height/4));var U=t.getPaintValue("text-translate",s),F=t.getPaintValue("text-translate-anchor",s),G=this._sdfProgramOptions;G.id=z;var k=x.getMaterialProgram(l,h,G);l.useProgram(k),k.setUniformMatrix3fv("u_displayViewMat3",M===w.aF.MAP?m.displayViewMat3:m.displayMat3),k.setUniformMatrix3fv("u_displayMat3",F===w.fD.VIEWPORT?m.displayMat3:m.displayViewMat3),k.setUniform2fv("u_textTranslation",U),k.setUniform1f("u_depth",t.z+152587890625e-16),k.setUniform2fv("u_mosaicSize",this._glyphTextureSize),k.setUniform1f("u_mapRotation",(0,W.s5)(m.rotation)),k.setUniform1f("u_keepUpright",N?1:0),k.setUniform1f("u_level",10*s),k.setUniform1i("u_texture",p.CU),k.setUniform1f("u_antialiasingWidth",V),k.setUniform1f("u_fadeDuration",B.nN/1e3),z&&k.setUniform4fv("u_id",i);var H,Y=-1,X=(0,D.Z)(n);try{var j=function(){var e=H.value;if(!e.layerData.has(g))return"continue";if(e.key.level!==Y&&(Y=e.key.level,h.setDataUniforms(k,s,t,Y,d)),0===(a=e.layerData.get(g)).glyphPerPageElementsMap.size)return"continue";a.prepareForRendering(l),a.updateOpacityInfo();var n=a.textVertexArrayObject;if((0,y.Wi)(n))return"continue";l.bindVAO(n),k.setUniformMatrix3fv("u_dvsMat3",e.transforms.dvs),l.setStencilTestEnabled(!0),l.setStencilFunction(v.wb.GREATER,255,255),l.setStencilWriteMask(0);var i=(performance.now()-a.lastOpacityUpdate)/1e3;k.setUniform1f("u_time",i),a.glyphPerPageElementsMap.forEach((function(t,n){r._renderGlyphRange(l,t,n,c,k,P,E,e)}))};for(X.s();!(H=X.n()).done;)j()}catch(q){X.e(q)}finally{X.f()}}}}}},{key:"_renderGlyphRange",value:function(e,t,n,i,a,o,r,l){i.bind(e,v.cw.LINEAR,n,p.CU),o&&(a.setUniform1f("u_halo",1),e.drawElements(v.MX.TRIANGLES,t[1],v.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),l.triangleCount+=t[1]/3),r&&(a.setUniform1f("u_halo",0),e.drawElements(v.MX.TRIANGLES,t[1],v.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),l.triangleCount+=t[1]/3)}}]),n}(f.Z),Y=n(84936),X=n(93433),j=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){var e;return(0,o.Z)(this,n),(e=t.apply(this,arguments))._computeDesc=new Map,e}return(0,r.Z)(n,[{key:"prepareState",value:function(e,t,n){var i=e.context,a=n&&-1!==n.indexOf("hittest");i.setBlendingEnabled(!a),i.setBlendFunctionSeparate(v.zi.ONE,v.zi.ONE_MINUS_SRC_ALPHA,v.zi.ONE,v.zi.ONE_MINUS_SRC_ALPHA),i.setColorMask(!0,!0,!0,!0),i.setStencilWriteMask(0),i.setStencilTestEnabled(!0),i.setStencilFunction(v.wb.EQUAL,t.stencilRef,255)}},{key:"draw",value:function(e,t,n){var i=this,a=this.getGeometryType();t.commit(e);var o=t.getGeometry(a);(0,y.Wi)(o)||(e.timeline.begin(this.name),e.attributeView.bindTextures(e.context),o.forEachCommand((function(a){return i.drawGeometry(e,t,a,n)})))}},{key:"_setSharedUniforms",value:function(e,t,n){var i=t.displayLevel,a=t.pixelRatio,o=t.state,r=t.passOptions;(0,y.pC)(r)&&"hittest"===r.type&&(e.setUniform2fv("u_hittestPos",r.position),e.setUniform1f("u_hittestDist",r.distance)),e.setUniform1f("u_pixelRatio",a),e.setUniformMatrix3fv("u_tileMat3",n.transforms.tileMat3),e.setUniformMatrix3fv("u_viewMat3",o.viewMat3),e.setUniformMatrix3fv("u_dvsMat3",n.transforms.dvs),e.setUniformMatrix3fv("u_displayViewMat3",o.displayViewMat3),e.setUniform1f("u_currentZoom",Math.round(i*p.MI)),e.setUniform1i("u_attributeTextureSize",t.attributeView.size),e.setUniform1i("u_attributeData0",p.iJ),e.setUniform1i("u_attributeData1",p.nM),e.setUniform1i("u_attributeData2",p.Ij),e.setUniform1i("u_attributeData3",p.f2)}},{key:"_setSizeVVUniforms",value:function(e,t,n,i){if(e.vvSizeMinMaxValue&&t.setUniform4fv("u_vvSizeMinMaxValue",n.vvSizeMinMaxValue),e.vvSizeScaleStops&&t.setUniform1f("u_vvSizeScaleStopsValue",n.vvSizeScaleStopsValue),e.vvSizeFieldStops){var a=n.getSizeVVFieldStops(i.key.level);t.setUniform1fv("u_vvSizeFieldStopsValues",a.values),t.setUniform1fv("u_vvSizeFieldStopsSizes",a.sizes)}e.vvSizeUnitValue&&t.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",n.vvSizeUnitValueToPixelsRatio)}},{key:"_setColorAndOpacityVVUniforms",value:function(e,t,n){e.vvColor&&(t.setUniform1fv("u_vvColorValues",n.vvColorValues),t.setUniform4fv("u_vvColors",n.vvColors)),e.vvOpacity&&(t.setUniform1fv("u_vvOpacityValues",n.vvOpacityValues),t.setUniform1fv("u_vvOpacities",n.vvOpacities))}},{key:"_setRotationVVUniforms",value:function(e,t,n){e.vvRotation&&t.setUniform1f("u_vvRotationType","geographic"===n.vvMaterialParameters.vvRotationType?0:1)}},{key:"_getTriangleDesc",value:function(e,t){var n=this._computeDesc.get(e);if(!n){var i=t.strides,o=t.strides.geometry,r=new Map(t.attributes),l=t.bufferLayouts.geometry.map((function(e){return(0,a.Z)({},e)})),s=Math.max.apply(Math,(0,X.Z)(t.attributes.values())),u={geometry:l};u.geometry.push({count:2,name:"a_pos1",divisor:0,normalized:!1,offset:o,stride:o,type:v.g.SHORT}),u.geometry.push({count:2,name:"a_pos2",divisor:0,normalized:!1,offset:2*o,stride:o,type:v.g.SHORT}),r.set("a_pos1",s+1),r.set("a_pos2",s+2),n={bufferLayouts:u,attributes:r,strides:i},this._computeDesc.set(e,n)}return n}}]),n}(f.Z),q=n(54815),K=n(53634),J=n(15880),Q=n(51378),$=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){var e;return(0,o.Z)(this,n),(e=t.apply(this,arguments))._dotTextureSize=0,e._dotTextures=null,e._dotSamplers=new Int32Array([p.kF,p.yP]),e._dotVAO=null,e._dotDesc={vsPath:"dot/dot",fsPath:"dot/dot",attributes:new Map([["a_pos",0]])},e}return(0,r.Z)(n,[{key:"dispose",value:function(){this._disposeTextures(),this._dotFBO=(0,y.O3)(this._dotFBO),this._dotVAO=(0,y.O3)(this._dotVAO)}},{key:"getGeometryType",value:function(){return R.LW.FILL}},{key:"drawGeometry",value:function(e,t,n,i){var a=e.context,o=e.painter,r=e.rendererInfo,l=e.requiredLevel,s=e.passOptions,u=q.dk.load(n.materialKey),c=o.materialManager,f=v.MX.TRIANGLES,_=function(e){var t={geometry:[{location:0,name:"a_pos",count:2,type:v.g.SHORT},{location:1,name:"a_id",count:3,type:v.g.UNSIGNED_BYTE},{location:2,name:"a_bitset",count:1,type:v.g.UNSIGNED_BYTE}]};return e.dotDensity?(t.geometry.push({location:3,name:"a_inverseArea",count:1,type:v.g.FLOAT}),(0,S.cM)(e.data,t)):(t.geometry.push({location:3,name:"a_color",count:4,type:v.g.UNSIGNED_BYTE,normalized:!0}),e.simple||t.geometry.push({location:4,name:"a_aux1",count:4,type:v.g.UNSIGNED_SHORT}),t.geometry.push({location:5,name:"a_aux2",count:4,type:v.g.UNSIGNED_BYTE},{location:6,name:"a_aux3",count:4,type:v.g.UNSIGNED_BYTE}),e.simple||t.geometry.push({location:7,name:"a_zoomRange",count:2,type:v.g.UNSIGNED_SHORT}),(0,S.cM)(e.data,t))}(u);(0,y.pC)(s)&&"hittest"===s.type&&(_=this._getTriangleDesc(n.materialKey,_),f=v.MX.POINTS);var d=_,m=d.attributes,p=d.bufferLayouts,g=c.getMaterialProgram(e,u,"materials/fill",m,i);if(a.useProgram(g),this._setSharedUniforms(g,e,t),g.setUniform2f("u_tileOffset",512*t.key.col,512*t.key.row),u.textureBinding){o.textureManager.bindTextures(a,g,u);var h=1/Math.pow(2,l-t.key.level)/e.pixelRatio;g.setUniform1f("u_zoomFactor",h)}var x=1/e.pixelRatio;g.setUniform1f("u_blur",x),g.setUniform1f("u_antialiasing",x),this._setSizeVVUniforms(u,g,r,t),this._setColorAndOpacityVVUniforms(u,g,r);var b=(0,y.pC)(s)&&"hittest"===s.type,T=n.target.getVAO(a,p,m,b),C=n.indexCount,I=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;if(b&&(C/=3,I/=3),a.bindVAO(T),!u.dotDensity||b)a.drawElements(f,C,v.g.UNSIGNED_INT,I);else{var E=this._drawDotLocations(e,t,g,C,I);this._drawDotDensity(e,t,E)}}},{key:"_drawDotDensity",value:function(e,t,n){var i=e.context,a=e.painter,o=e.rendererInfo,r=a.materialManager.getProgram(e,this._dotDesc),l=this._createDotDensityMesh(i,this._dotDesc.attributes,{geometry:[{name:"a_pos",count:2,type:v.g.SHORT,divisor:0,normalized:!1,offset:0,stride:4}]});i.setStencilTestEnabled(!0),i.useProgram(r),r.setUniform1f("u_tileZoomFactor",1),r.setUniform1i("u_texture",this._dotSamplers[0]),r.setUniform1f("u_dotSize",Math.max(o.ddDotSize,1)),r.setUniform1f("u_pixelRatio",window.devicePixelRatio),this._setSharedUniforms(r,e,t),i.bindTexture(n,this._dotSamplers[0]),i.bindVAO(l),i.drawArrays(v.MX.POINTS,0,262144)}},{key:"_drawDotLocations",value:function(e,t,n,i,a){var o=e.context,r=e.rendererInfo,l=e.requiredLevel,s=o.getViewport();o.setViewport(0,0,512,512);var u=o.getBoundFramebufferObject(),c=this._createFBO(o);o.bindFramebuffer(c),o.setClearColor(0,0,0,0),o.clear(o.gl.COLOR_BUFFER_BIT|o.gl.STENCIL_BUFFER_BIT),o.setStencilTestEnabled(!1);var f=1/Math.pow(2,l-t.key.level),_=p.I_,d=_*window.devicePixelRatio*_*window.devicePixelRatio,m=1/f*(1/f),g=r.ddDotScale?e.state.scale/r.ddDotScale:1;return n.setUniform1f("u_tileZoomFactor",f),n.setUniform1f("u_tileDotsOverArea",d/(p.I_*window.devicePixelRatio*p.I_*window.devicePixelRatio)),n.setUniformMatrix4fv("u_dotColors",r.ddColors),n.setUniform4fv("u_isActive",r.ddActiveDots),n.setUniform4fv("u_dotBackgroundColor",r.ddBackgroundColor),n.setUniform1f("u_dotValue",Math.max(1,r.ddDotValue*g*m)),this._bindDotDensityTextures(o,n,r,_),o.drawElements(v.MX.TRIANGLES,i,v.g.UNSIGNED_INT,a),o.setViewport(s.x,s.y,s.width,s.height),o.bindFramebuffer(u),c.colorTexture}},{key:"_createFBO",value:function(e){if((0,y.Wi)(this._dotFBO)){var t={target:v.No.TEXTURE_2D,pixelFormat:v.VI.RGBA,dataType:v.Br.UNSIGNED_BYTE,samplingMode:v.cw.NEAREST,wrapMode:v.e8.CLAMP_TO_EDGE,width:512,height:512},n={colorTarget:v.Lm.TEXTURE,depthStencilTarget:v.OU.DEPTH_STENCIL_RENDER_BUFFER},i=new J.r(e,{width:512,height:512,internalFormat:v.Tg.DEPTH_STENCIL});this._dotFBO=new K.X(e,n,t,i)}return this._dotFBO}},{key:"_disposeTextures",value:function(){if(this._dotTextures){for(var e=0;e<this._dotTextures.length;e++)this._dotTextures[e].dispose();this._dotTextures=null}}},{key:"_bindDotDensityTextures",value:function(e,t,n,i){var a=this._createDotDensityTextures(e,i,n.ddSeed);t.setUniform1iv("u_dotTextures",this._dotSamplers);for(var o=0;o<a.length;o++)e.bindTexture(a[o],this._dotSamplers[o])}},{key:"_createDotDensityMesh",value:function(e,t,n){if((0,y.Wi)(this._dotVAO)){for(var i=new Int16Array(524288),a=0;a<512;a++)for(var o=0;o<512;o++)i[2*(o+512*a)]=o,i[2*(o+512*a)+1]=a;var r=L.f.createVertex(e,v.l1.STATIC_DRAW,i);this._dotVAO=new N.U(e,t,n,{geometry:r},null)}return this._dotVAO}},{key:"_createDotDensityTextures",value:function(e,t,n){if(this._dotTextureSize===t&&this._seed===n||(this._disposeTextures(),this._dotTextureSize=t,this._seed=n),null===this._dotTextures){var i=new Y.Z(n);this._dotTextures=[this._allocDotDensityTexture(e,t,i),this._allocDotDensityTexture(e,t,i)]}return this._dotTextures}},{key:"_allocDotDensityTexture",value:function(e,t,n){for(var i=new Float32Array(t*t*4),a=0;a<i.length;a++)i[a]=n.getFloat();return new Q.x(e,{wrapMode:v.e8.REPEAT,pixelFormat:v.VI.RGBA,dataType:v.Br.FLOAT,samplingMode:v.cw.NEAREST,width:t,height:t},i)}}]),n}(j),ee=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){return(0,o.Z)(this,n),t.apply(this,arguments)}return(0,r.Z)(n,[{key:"dispose",value:function(){}},{key:"getGeometryType",value:function(){return R.LW.LABEL}},{key:"drawGeometry",value:function(e,t,n,i){var a=e.context,o=e.painter,r=e.state,l=e.rendererInfo,s=q.Gq.load(n.materialKey),u=s.mapAligned?1:0;if(u||!(Math.abs(t.key.level-Math.round(100*e.displayLevel)/100)>=1)){var c=function(e){return(0,S.cM)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:v.g.SHORT},{location:1,name:"a_id",count:4,type:v.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:v.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_haloColor",count:4,type:v.g.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_texAndSize",count:4,type:v.g.UNSIGNED_BYTE},{location:5,name:"a_refSymbolAndPlacementOffset",count:4,type:v.g.UNSIGNED_BYTE},{location:6,name:"a_glyphData",count:4,type:v.g.UNSIGNED_BYTE},{location:7,name:"a_vertexOffset",count:2,type:v.g.SHORT},{location:8,name:"a_texCoords",count:2,type:v.g.UNSIGNED_SHORT}]})}(s),f=c.bufferLayouts,_=c.attributes,d=o.materialManager.getMaterialProgram(e,s,"materials/label",_,i);e.context.setStencilFunction(v.wb.EQUAL,0,255),a.useProgram(d),this._setSharedUniforms(d,e,t),o.textureManager.bindTextures(a,d,s);var m=1===u?r.displayViewMat3:r.displayMat3;this._setSizeVVUniforms(s,d,l,t),d.setUniform1f("u_mapRotation",Math.floor(r.rotation/360*254)),d.setUniform1f("u_mapAligned",u),d.setUniformMatrix3fv("u_displayMat3",m),d.setUniform1f("u_opacity",1),d.setUniform2fv("u_screenSize",e.state.size),d.setUniform1f("u_isHalo",1);var p=n.target.getVAO(a,f,_),g=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;a.bindVAO(p),a.drawElements(v.MX.TRIANGLES,n.indexCount,v.g.UNSIGNED_INT,g),d.setUniform1f("u_isHalo",0),a.drawElements(v.MX.TRIANGLES,n.indexCount,v.g.UNSIGNED_INT,g),a.setStencilTestEnabled(!0),a.setBlendingEnabled(!0)}}}]),n}(j),te=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){return(0,o.Z)(this,n),t.apply(this,arguments)}return(0,r.Z)(n,[{key:"dispose",value:function(){}},{key:"getGeometryType",value:function(){return R.LW.LINE}},{key:"drawGeometry",value:function(e,t,n,i){var a=e.context,o=e.painter,r=e.rendererInfo,l=e.displayLevel,s=e.passOptions,u=q.a.load(n.materialKey),c=function(e){return(0,S.cM)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:v.g.SHORT},{location:1,name:"a_id",count:4,type:v.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:v.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_offsetAndNormal",count:4,type:v.g.BYTE},{location:4,name:"a_accumulatedDistanceAndHalfWidth",count:2,type:v.g.UNSIGNED_SHORT},{location:5,name:"a_tlbr",count:4,type:v.g.UNSIGNED_SHORT},{location:6,name:"a_segmentDirection",count:4,type:v.g.BYTE},{location:7,name:"a_aux",count:2,type:v.g.UNSIGNED_SHORT},{location:8,name:"a_zoomRange",count:2,type:v.g.UNSIGNED_SHORT}]})}(u),f=v.MX.TRIANGLES;(0,y.pC)(s)&&"hittest"===s.type&&(c=this._getTriangleDesc(n.materialKey,c),f=v.MX.POINTS);var _=c,d=_.attributes,m=_.bufferLayouts,p=o.materialManager.getMaterialProgram(e,u,"materials/line",d,i),g=1/e.pixelRatio;a.useProgram(p),this._setSharedUniforms(p,e,t),u.textureBinding&&o.textureManager.bindTextures(a,p,u);var h=Math.pow(2,l-t.key.level)/e.pixelRatio;p.setUniform1f("u_zoomFactor",h),p.setUniform1f("u_blur",0+g),p.setUniform1f("u_antialiasing",g),this._setSizeVVUniforms(u,p,r,t),this._setColorAndOpacityVVUniforms(u,p,r),a.setFaceCullingEnabled(!1);var x=(0,y.pC)(s)&&"hittest"===s.type,b=n.target.getVAO(a,m,d,x),T=n.indexCount,C=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;x&&(T/=3,C/=3),a.bindVAO(b),a.drawElements(f,T,v.g.UNSIGNED_INT,C)}}]),n}(j),ne=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){return(0,o.Z)(this,n),t.apply(this,arguments)}return(0,r.Z)(n,[{key:"dispose",value:function(){}},{key:"getGeometryType",value:function(){return R.LW.MARKER}},{key:"drawGeometry",value:function(e,t,n,i){var a=e.context,o=e.painter,r=e.rendererInfo,l=e.state,s=e.passOptions,u=q.mE.load(n.materialKey),c=function(e){return(0,S.cM)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:v.g.SHORT},{location:1,name:"a_vertexOffset",count:2,type:v.g.SHORT},{location:2,name:"a_texCoords",count:2,type:v.g.UNSIGNED_SHORT},{location:3,name:"a_bitSetAndDistRatio",count:2,type:v.g.UNSIGNED_SHORT},{location:4,name:"a_id",count:4,type:v.g.UNSIGNED_BYTE},{location:5,name:"a_color",count:4,type:v.g.UNSIGNED_BYTE,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:v.g.UNSIGNED_BYTE,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:v.g.UNSIGNED_BYTE},{location:8,name:"a_zoomRange",count:2,type:v.g.UNSIGNED_SHORT}]})}(u),f=c.bufferLayouts,_=c.attributes,d=o.materialManager.getMaterialProgram(e,u,"materials/icon",_,i);a.useProgram(d),u.textureBinding&&o.textureManager.bindTextures(a,d,u,!0);var m=v.MX.TRIANGLES;(0,y.pC)(s)&&"hittest"===s.type&&(m=v.MX.POINTS),this._setSharedUniforms(d,e,t);var p=u.vvRotation?l.displayViewMat3:l.displayMat3;d.setUniformMatrix3fv("u_displayMat3",p),this._setSizeVVUniforms(u,d,r,t),this._setColorAndOpacityVVUniforms(u,d,r),this._setRotationVVUniforms(u,d,r);var g=n.target.getVAO(a,f,_),h=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;a.bindVAO(g),a.drawElements(m,n.indexCount,v.g.UNSIGNED_INT,h)}}]),n}(j),ie=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){return(0,o.Z)(this,n),t.apply(this,arguments)}return(0,r.Z)(n,[{key:"dispose",value:function(){}},{key:"getGeometryType",value:function(){return R.LW.TEXT}},{key:"drawGeometry",value:function(e,t,n,i){var a=e.context,o=e.painter,r=e.rendererInfo,l=e.state,s=e.passOptions,u=q.qr.load(n.materialKey),c=function(e){return(0,S.cM)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:v.g.SHORT},{location:1,name:"a_id",count:4,type:v.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:v.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_haloColor",count:4,type:v.g.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_texFontSize",count:4,type:v.g.UNSIGNED_BYTE},{location:5,name:"a_aux",count:4,type:v.g.BYTE},{location:6,name:"a_zoomRange",count:2,type:v.g.UNSIGNED_SHORT},{location:7,name:"a_vertexOffset",count:2,type:v.g.SHORT},{location:8,name:"a_texCoords",count:2,type:v.g.UNSIGNED_SHORT}]})}(u),f=c.bufferLayouts,_=c.attributes,d=o.materialManager.getMaterialProgram(e,u,"materials/text",_,i);a.useProgram(d);var m=v.MX.TRIANGLES;(0,y.pC)(s)&&"hittest"===s.type&&(m=v.MX.POINTS),this._setSharedUniforms(d,e,t),o.textureManager.bindTextures(a,d,u),d.setUniformMatrix3fv("u_displayMat3",l.displayMat3),d.setUniformMatrix3fv("u_displayViewMat3",l.displayViewMat3),this._setSizeVVUniforms(u,d,r,t),this._setColorAndOpacityVVUniforms(u,d,r),this._setRotationVVUniforms(u,d,r),d.setUniform1f("u_isHalo",1);var p=n.target.getVAO(a,f,_),g=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;a.bindVAO(p),a.drawElements(v.MX.TRIANGLES,n.indexCount,v.g.UNSIGNED_INT,g),d.setUniform1f("u_isHalo",0),a.drawElements(m,n.indexCount,v.g.UNSIGNED_INT,g)}}]),n}(j),ae={marker:ne,line:te,fill:$,text:ie,label:ee,clip:I,stencil:O.Z,bitmap:x,raster:d,rasterVF:m.Z,flow:i.Z,tileInfo:E.Z,vtlBackground:z,vtlFill:G,vtlLine:k,vtlCircle:V,vtlSymbol:H}},28959:function(e,t,n){n.d(t,{Z:function(){return c}});var i=n(15671),a=n(43144),o=n(60136),r=n(54062),l=n(92026),s=n(3886),u=n(8548),c=function(e){(0,o.Z)(n,e);var t=(0,r.Z)(n);function n(){return(0,i.Z)(this,n),t.apply(this,arguments)}return(0,a.Z)(n,[{key:"dispose",value:function(){}},{key:"prepareState",value:function(e){var t=e.context;t.setColorMask(!0,!0,!0,!0),t.setStencilFunction(u.wb.EQUAL,0,255)}},{key:"draw",value:function(e,t){var n=e.context,i=t.displayData;if(!(0,l.Wi)(i)&&("loaded"===i.state.name&&i.prepareForRendering(n),"attached"===i.state.name)){var a=i.state.resources;n.setFaceCullingEnabled(!1),n.setBlendingEnabled(!0),n.setBlendFunctionSeparate(u.zi.ONE,u.zi.ONE_MINUS_SRC_ALPHA,u.zi.ONE,u.zi.ONE);var o=[];"ramp"===a.values.lineColor.kind&&o.push("vvLineColor"),"ramp"===a.values.lineOpacity.kind&&o.push("vvLineOpacity"),"ramp"===a.values.lineRenderWidth.kind&&o.push("vvLineRenderWidth");var r=e.painter.materialManager.getProgram(e,{vsPath:"raster/flow",fsPath:"raster/flow",attributes:a.locations},o);n.useProgram(r),r.setUniform1f("u_time",e.time/1e3),r.setUniform1f("u_fadeDuration",i.flowStyle.renderSettings.fadeDuration),r.setUniform1f("u_lineSpeed",i.flowStyle.renderSettings.lineSpeed),r.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),r.setUniformMatrix3fv("u_displayViewMat3",e.state.displayViewMat3),v(r,"lineColor","vec4",i.flowStyle.renderSettings.lineColor),v(r,"lineOpacity","float",i.flowStyle.renderSettings.lineOpacity),v(r,"lineRenderWidth","float",i.flowStyle.renderSettings.lineRenderWidth),n.bindVAO(a.vertexArray),n.drawElements(u.MX.TRIANGLES,a.indexBuffer.size,u.g.UNSIGNED_INT,0),i.flowStyle.animated&&t.requestRender()}}}]),n}(s.Z);function f(e,t,n,i){switch(t){case"int":e.setUniform1iv(n,i);break;case"float":e.setUniform1fv(n,i);break;case"vec2":e.setUniform2fv(n,i);break;case"vec3":e.setUniform3fv(n,i);break;case"vec4":e.setUniform4fv(n,i)}}function v(e,t,n,i){"constant"===i.kind?f(e,n,"u_".concat(t),i.value):(f(e,"float","u_".concat(t,"_stops"),i.stops),f(e,n,"u_".concat(t,"_values"),i.values),f(e,"int","u_".concat(t,"_count"),[i.count]))}},57874:function(e,t,n){n.d(t,{Z:function(){return v}});var i=n(15671),a=n(43144),o=n(60136),r=n(54062),l=n(92026),s=n(3886),u=n(8548),c=new Float32Array([.27058823529411763,.4588235294117647,.7098039215686275,1,.396078431372549,.5372549019607843,.7215686274509804,1,.5176470588235295,.6196078431372549,.7294117647058823,1,.6352941176470588,.7058823529411765,.7411764705882353,1,.7529411764705882,.8,.7450980392156863,1,.8705882352941177,.8901960784313725,.7490196078431373,1,1,1,.7490196078431373,1,1,.8627450980392157,.6313725490196078,1,.9803921568627451,.7254901960784313,.5176470588235295,1,.9607843137254902,.596078431372549,.4117647058823529,1,.9294117647058824,.4588235294117647,.3176470588235294,1,.9098039215686274,.08235294117647059,.08235294117647059,1]),f={beaufort_ft:c,beaufort_m:c,beaufort_km:c,beaufort_mi:c,beaufort_kn:new Float32Array([.1568627450980392,.5725490196078431,.7803921568627451,1,.34901960784313724,.6352941176470588,.7294117647058823,1,.5058823529411764,.7019607843137254,.6705882352941176,1,.6274509803921569,.7607843137254902,.6078431372549019,1,.7490196078431373,.8313725490196079,.5411764705882353,1,.8549019607843137,.9019607843137255,.4666666666666667,1,.9803921568627451,.9803921568627451,.39215686274509803,1,.9882352941176471,.8352941176470589,.3254901960784314,1,.9882352941176471,.7019607843137254,.4,1,.9803921568627451,.5529411764705883,.20392156862745098,1,.9686274509803922,.43137254901960786,.16470588235294117,1,.9411764705882353,.2784313725490196,.11372549019607843,1]),classified_arrow:new Float32Array([.2196078431372549,.6588235294117647,0,1,.5450980392156862,1.2117647058823529,0,1,1,1,0,1,1,.5019607843137255,0,1,1,0,0,1]),ocean_current_m:new Float32Array([.3058823529411765,.10196078431372549,.6,1,.7019607843137254,.10588235294117647,.10196078431372549,1,.792156862745098,.5019607843137255,.10196078431372549,1,.6941176470588235,.6941176470588235,.6941176470588235,1]),ocean_current_kn:new Float32Array([0,0,0,1,0,.1450980392156863,.39215686274509803,1,.3058823529411765,.10196078431372549,.6,1,.592156862745098,0,.39215686274509803,1,.7019607843137254,.10588235294117647,.10196078431372549,1,.6941176470588235,.3058823529411765,.10196078431372549,1,.792156862745098,.5019607843137255,.10196078431372549,1,.6941176470588235,.7019607843137254,.20392156862745098,1,.6941176470588235,.6941176470588235,.6941176470588235,1]),single_arrow:new Float32Array([0,92/255,230/255,1]),wind_speed:new Float32Array([0,0,0,1])},v=function(e){(0,o.Z)(n,e);var t=(0,r.Z)(n);function n(){var e;return(0,i.Z)(this,n),(e=t.apply(this,arguments))._desc={magdir:{vsPath:"raster/magdir",fsPath:"raster/magdir",attributes:new Map([["a_pos",0],["a_offset",1],["a_vv",2]])},scalar:{vsPath:"raster/scalar",fsPath:"raster/scalar",attributes:new Map([["a_pos",0],["a_offset",1],["a_vv",2]])}},e}return(0,a.Z)(n,[{key:"dispose",value:function(){}},{key:"prepareState",value:function(e,t){var n=e.context;n.setBlendingEnabled(!0),n.setBlendFunctionSeparate(u.zi.ONE,u.zi.ONE_MINUS_SRC_ALPHA,u.zi.ONE,u.zi.ONE_MINUS_SRC_ALPHA),n.setColorMask(!0,!0,!0,!0),n.setStencilWriteMask(0),n.setStencilTestEnabled(!0),n.setStencilOp(u.xS.KEEP,u.xS.KEEP,u.xS.REPLACE),n.setStencilFunction(u.wb.EQUAL,t.stencilRef,255)}},{key:"draw",value:function(e,t){if(!(0,l.Wi)(t.source)&&0!==t.source.validPixelCount){var n=e.timeline;if(n.begin(this.name),t.updateVectorFieldVAO(e),"scalar"===e.renderPass){var i=t.vaoData.scalar;i&&this._drawScalars(e,t,i.vao,i.elementCount)}else{var a=t.vaoData.magdir;a&&this._drawTriangles(e,t,a.vao,a.elementCount)}n.end(this.name)}}},{key:"_drawTriangles",value:function(e,t,n,i){var a=e.context,o=e.painter,r=t.symbolizerParameters,l=r.dataRange?["dataRange"]:[];"geographic"===r.rotationType&&l.push("rotationGeographic");var s=o.materialManager.getProgram(e,this._desc.magdir,l);a.useProgram(s);var c=t.coordScale,v=t.opacity,_=t.transforms;s.setUniform2fv("u_coordScale",c),s.setUniform1f("u_opacity",v),s.setUniformMatrix3fv("u_dvsMat3",_.dvs);var d=r.style,m=r.dataRange,p=r.rotation,g=r.symbolPercentRange;s.setUniform4fv("u_colors",f[d]||f.single_arrow),s.setUniform2fv("u_dataRange",m),s.setUniform1f("u_rotation",p),s.setUniform2fv("u_symbolPercentRange",g);var h=this._getSymbolSize(e,t);s.setUniform2fv("u_symbolSize",h),a.bindVAO(n),a.drawElements(u.MX.TRIANGLES,i,u.g.UNSIGNED_INT,0)}},{key:"_drawScalars",value:function(e,t,n,i){var a=e.context,o=e.painter,r=t.symbolizerParameters,l=[];"wind_speed"===r.style?l.push("innerCircle"):r.dataRange&&l.push("dataRange"),"geographic"===r.rotationType&&l.push("rotationGeographic");var s=o.materialManager.getProgram(e,this._desc.scalar,l);a.useProgram(s);var c=t.coordScale,f=t.opacity,v=t.transforms;s.setUniform2fv("u_coordScale",c),s.setUniform1f("u_opacity",f),s.setUniformMatrix3fv("u_dvsMat3",v.dvs);var _=r.dataRange,d=r.symbolPercentRange;s.setUniform2fv("u_dataRange",_),s.setUniform2fv("u_symbolPercentRange",d);var m=this._getSymbolSize(e,t);s.setUniform2fv("u_symbolSize",m),a.bindVAO(n),a.drawElements(u.MX.TRIANGLES,i,u.g.UNSIGNED_INT,0)}},{key:"_getSymbolSize",value:function(e,t){var n=t.key?Math.pow(2,e.displayLevel-t.key.level):t.resolution/e.state.resolution,i=t.symbolizerParameters.symbolTileSize;return[i/(Math.round((t.width-t.offset[0])/i)*i)/n,i/(Math.round((t.height-t.offset[1])/i)*i)/n]}}]),n}(s.Z)},67997:function(e,t,n){n.d(t,{br:function(){return h},qE:function(){return x}});var i=n(93433),a=n(29439),o=n(15671),r=n(43144),l=n(60136),s=n(54062),u=n(92026),c=n(22753),f=n(23588),v=n(15245),_=n(17314),d=n(87422),m=n(8548),p=n(48673),g={bandCount:3,outMin:0,outMax:1,minCutOff:[0,0,0],maxCutOff:[255,255,255],factor:[1/255,1/255,1/255],useGamma:!1,gamma:[1,1,1],gammaCorrection:[1,1,1],colormap:null,colormapOffset:null,stretchType:"none",type:"stretch"},h=function(e){(0,l.Z)(n,e);var t=(0,s.Z)(n);function n(){var e,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return(0,o.Z)(this,n),(e=t.call(this))._textureInvalidated=!0,e._colormapTextureInvalidated=!0,e._supportsBilinearTexture=!0,e.stencilRef=0,e.coordScale=[1,1],e._symbolizerParameters=null,e.height=null,e.isRendereredSource=!1,e.pixelRatio=1,e.resolution=0,e.rotation=0,e._source=null,e.rawPixelData=null,e._suspended=!1,e._bandIds=null,e._interpolation=null,e._transformGrid=null,e.width=null,e.x=0,e.y=0,e.source=i,e.transformGrid=a,e.interpolation=r,e}return(0,r.Z)(n,[{key:"destroy",value:function(){var e=this.getTextures();null==e||e.textures.forEach((function(e){return e.dispose()})),this._rasterTexture=null,this._transformGridTexture=null,this._colormapTexture=null}},{key:"symbolizerParameters",get:function(){return this._symbolizerParameters||g},set:function(e){this._symbolizerParameters!==e&&(this._symbolizerParameters=e,this._colormapTextureInvalidated=!0)}},{key:"source",get:function(){return this._source},set:function(e){this._source!==e&&(this._source=e,this._rasterTexture&&(this._rasterTexture.dispose(),this._rasterTexture=null,this._rasterTextureBandIds=null),this.invalidateTexture())}},{key:"suspended",get:function(){return this._suspended},set:function(e){this._suspended&&!e&&this.stage&&(this.ready(),this.requestRender()),this._suspended=e}},{key:"bandIds",get:function(){return this._bandIds},set:function(e){this._bandIds=e,this._isBandIdschanged(e)&&this.invalidateTexture()}},{key:"interpolation",get:function(){return this._interpolation||"nearest"},set:function(e){this._interpolation=e,this._rasterTexture&&this._rasterTexture.setSamplingMode("bilinear"===this._getTextureSamplingMethod(e)?m.cw.LINEAR:m.cw.NEAREST)}},{key:"transformGrid",get:function(){return this._transformGrid},set:function(e){this._transformGrid=e,this._transformGridTexture&&(this._transformGridTexture.dispose(),this._transformGridTexture=null)}},{key:"invalidateTexture",value:function(){this._textureInvalidated||(this._textureInvalidated=!0,this.requestRender())}},{key:"_createTransforms",value:function(){return{dvs:(0,f.c)()}}},{key:"setTransform",value:function(e){var t=(0,c.b)(this.transforms.dvs),n=e.toScreenNoRotation([0,0],[this.x,this.y]),i=(0,a.Z)(n,2),o=i[0],r=i[1],l=this.resolution/this.pixelRatio/e.resolution,s=l*this.width,u=l*this.height,f=Math.PI*this.rotation/180;(0,c.c)(t,t,(0,v.f)(o,r)),(0,c.c)(t,t,(0,v.f)(s/2,u/2)),(0,c.r)(t,t,-f),(0,c.c)(t,t,(0,v.f)(-s/2,-u/2)),(0,c.j)(t,t,(0,v.f)(s,u)),(0,c.m)(this.transforms.dvs,e.displayViewMat3,t)}},{key:"getTextures",value:function(){if(!this._rasterTexture)return null;var e=[],t=[];return this._transformGridTexture&&(t.push(this._transformGridTexture),e.push("u_transformGrid")),this._rasterTexture&&(t.push(this._rasterTexture),e.push("u_image")),this._colormapTexture&&(t.push(this._colormapTexture),e.push("u_colormap")),{names:e,textures:t}}},{key:"onAttach",value:function(){this.invalidateTexture()}},{key:"onDetach",value:function(){this.invalidateTexture()}},{key:"updateTexture",value:function(e){var t,n,i,a=e.context;if(!this.stage)return null==(t=this._rasterTexture)||t.dispose(),null==(n=this._transformGridTexture)||n.dispose(),null==(i=this._colormapTexture)||i.dispose(),this._rasterTexture=null,this._rasterTextureBandIds=null,this._transformGridTexture=null,void(this._colormapTexture=null);var o=this._isValidSource(this.source);o&&this._colormapTextureInvalidated&&(this._colormapTextureInvalidated=!1,this._updateColormapTexture(a)),this._textureInvalidated&&(this._textureInvalidated=!1,this._createOrDestroyRasterTexture(a),this._rasterTexture&&(o?this.transformGrid&&!this._transformGridTexture&&(this._transformGridTexture=(0,p.Br)(a,this.transformGrid)):this._rasterTexture.setData(null)),this.suspended||(this.ready(),this.requestRender()))}},{key:"_createOrDestroyRasterTexture",value:function(e){var t,n,a=(0,u.pC)(this.source)?(0,_.qF)(this.source,this.bandIds):null;if(this._isValidSource(a)){var o=!this._isBandIdschanged(this.bandIds);if(this._rasterTexture){if(o)return;this._rasterTexture.dispose(),this._rasterTextureBandIds=null,this._rasterTexture=null}this._supportsBilinearTexture=null==(t=e.capabilities.textureFloat)?void 0:t.textureFloatLinear;var r=this._getTextureSamplingMethod(this.interpolation),l=this.isRendereredSource||!(null!=(n=e.capabilities.textureFloat)&&n.textureFloat);this._rasterTexture=(0,p.s9)(e,a,r,l),this._rasterTextureBandIds=this.bandIds?(0,i.Z)(this.bandIds):null}else this._rasterTexture&&(this._rasterTexture.dispose(),this._rasterTextureBandIds=null,this._rasterTexture=null)}},{key:"_isBandIdschanged",value:function(e){var t=this._rasterTextureBandIds;return!(null==t&&null==e||t&&e&&t.join("")===e.join(""))}},{key:"_isValidSource",value:function(e){var t;return(0,u.pC)(e)&&(null==(t=e.pixels)?void 0:t.length)>0}},{key:"_getTextureSamplingMethod",value:function(e){var t=this.symbolizerParameters,n=t.type,i=t.colormap,a="lut"===n||"stretch"===n&&(0,u.pC)(i);return!this._supportsBilinearTexture||a||"bilinear"!==e&&"cubic"!==e?"nearest":"bilinear"}},{key:"_updateColormapTexture",value:function(e){var t=this._colormap,n=this.symbolizerParameters.colormap;return n?t?n.length!==t.length||n.some((function(e,n){return e!==t[n]}))?(this._colormapTexture&&(this._colormapTexture.dispose(),this._colormapTexture=null),this._colormapTexture=(0,p.iC)(e,n),void(this._colormap=n)):void 0:(this._colormapTexture=(0,p.iC)(e,n),void(this._colormap=n)):(this._colormapTexture&&(this._colormapTexture.dispose(),this._colormapTexture=null),void(this._colormap=null))}}]),n}(d.s);function x(e){return(0,u.pC)(e.source)}},61441:function(e,t,n){n.d(t,{As:function(){return r},cD:function(){return l},sy:function(){return o}});var i=n(8548),a=n(61109),o={geometry:[new a.G("a_pos",2,i.g.BYTE,0,2)]},r={geometry:[new a.G("a_pos",2,i.g.BYTE,0,4),new a.G("a_tex",2,i.g.BYTE,2,4)]},l={geometry:[new a.G("a_pos",2,i.g.UNSIGNED_SHORT,0,4)]}},25866:function(e,t,n){n.d(t,{Z:function(){return u}});var i=n(15671),a=n(43144),o=n(44070),r=n(8548),l=n(45412),s=n(61109),u=function(){function e(t,n){(0,i.Z)(this,e),this.rctx=t,this._vertexBuffer=o.f.createVertex(t,r.l1.STATIC_DRAW,new Uint16Array(n)),this._vao=new l.U(t,new Map([["a_position",0]]),{geometry:[new s.G("a_position",2,r.g.SHORT,0,4)]},{geometry:this._vertexBuffer}),this._count=n.length/2}return(0,a.Z)(e,[{key:"bind",value:function(){this._vao.bind()}},{key:"unbind",value:function(){this._vao.unbind()}},{key:"dispose",value:function(){this._vao.dispose(!1),this._vertexBuffer.dispose()}},{key:"draw",value:function(){this.rctx.bindVAO(this._vao),this.rctx.drawArrays(r.MX.TRIANGLE_STRIP,0,this._count)}}]),e}()},64510:function(e,t,n){n.d(t,{Z:function(){return V}});var i=n(37762),a=n(15671),o=n(43144),r=n(11752),l=n(61120),s=n(60136),u=n(54062),c=(n(93169),n(92026)),f=n(23588),v=n(75010),_=n(33624),d=n(29439),m=n(10064),p=n(32718),g=n(87422),h=n(4942),x=n(1413),y=n(79347),b=n(88396),S=n(6394),T=n(83406),C=n(80457),I=n(73271),E=n(44070),O=n(8548),D=p.Z.getLogger("esri.views.2d.engine.webgl.Mesh2D"),A=function(e,t,n,i){for(var a=0,o=1;o<n;o++){var r=e[2*(t+o-1)],l=e[2*(t+o-1)+1];a+=(e[2*(t+o)]-r)*(e[2*(t+o)+1]+l)}return i?a>0:a<0},P=function(e,t){for(var n=e.coords,a=e.lengths,o=[],r=0,l=0;r<a.length;l+=a[r],r+=1){for(var s=l,u=[];r<a.length-1&&A(n,l+a[r],a[r+1],t);l+=a[r+=1])u.push(l+a[r]-s);var c,f=n.slice(2*s,2*(l+a[r])),v=(0,y.e)(f,u,2),_=(0,i.Z)(v);try{for(_.s();!(c=_.n()).done;){var d=c.value;o.push(d+s)}}catch(m){_.e(m)}finally{_.f()}}return o},R=function(){function e(t,n,i){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];(0,a.Z)(this,e),this._cache={},this.vertices=t,this.indices=n,this.primitiveType=i,this.isMapSpace=o}return(0,o.Z)(e,[{key:"destroy",value:function(){for(var e in(0,c.pC)(this._cache.indexBuffer)&&this._cache.indexBuffer.dispose(),this._cache.vertexBuffers)(0,c.pC)(this._cache.vertexBuffers[e])&&this._cache.vertexBuffers[e].dispose()}},{key:"elementType",get:function(){return function(e){switch(e.BYTES_PER_ELEMENT){case 1:return O.g.UNSIGNED_BYTE;case 2:return O.g.UNSIGNED_SHORT;case 4:return O.g.UNSIGNED_INT;default:throw new m.Z("Cannot get DataType of array")}}(this.indices)}},{key:"getIndexBuffer",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:O.l1.STATIC_DRAW;return this._cache.indexBuffer||(this._cache.indexBuffer=E.f.createIndex(e,t,this.indices)),this._cache.indexBuffer}},{key:"getVertexBuffers",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:O.l1.STATIC_DRAW;return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce((function(i,a){return(0,x.Z)((0,x.Z)({},i),{},(0,h.Z)({},a,E.f.createVertex(e,n,t.vertices[a])))}),{})),this._cache.vertexBuffers}}],[{key:"fromRect",value:function(t){var n=t.x,i=t.y,a=n+t.width,o=i+t.height;return e.fromScreenExtent({xmin:n,ymin:i,xmax:a,ymax:o})}},{key:"fromPath",value:function(t){for(var n=(0,T.ks)(new C.Z,t.path,!1,!1),i=n.coords,a=new Uint32Array(P(n,!0)),o=new Uint32Array(i.length/2),r=0;r<o.length;r++)o[r]=(0,I.UJ)(Math.floor(i[2*r]),Math.floor(i[2*r+1]));return new e({geometry:o},a,O.MX.TRIANGLES)}},{key:"fromGeometry",value:function(t,n){var i=n.geometry.type;switch(i){case"polygon":return e.fromPolygon(t,n.geometry);case"extent":return e.fromMapExtent(t,n.geometry);default:return D.error(new m.Z("mapview-bad-type","Unable to create a mesh from type ".concat(i),n)),e.fromRect({x:0,y:0,width:1,height:1})}}},{key:"fromPolygon",value:function(t,n){for(var i=(0,T.Uy)(new C.Z,n,!1,!1),a=i.coords,o=new Uint32Array(P(i,!1)),r=new Uint32Array(a.length/2),l=(0,S.a)(),s=(0,S.a)(),u=0;u<r.length;u++)(0,b.s)(l,a[2*u],a[2*u+1]),t.toScreen(s,l),r[u]=(0,I.UJ)(Math.floor(s[0]),Math.floor(s[1]));return new e({geometry:r},o,O.MX.TRIANGLES,!0)}},{key:"fromScreenExtent",value:function(t){var n=t.xmin,i=t.xmax,a=t.ymin,o=t.ymax;return new e({geometry:new Uint32Array([(0,I.UJ)(n,a),(0,I.UJ)(i,a),(0,I.UJ)(n,o),(0,I.UJ)(n,o),(0,I.UJ)(i,a),(0,I.UJ)(i,o)])},new Uint32Array([0,1,2,3,4,5]),O.MX.TRIANGLES)}},{key:"fromMapExtent",value:function(t,n){var i=t.toScreen([0,0],[n.xmin,n.ymin]),a=(0,d.Z)(i,2),o=a[0],r=a[1],l=t.toScreen([0,0],[n.xmax,n.ymax]),s=(0,d.Z)(l,2),u=s[0],c=s[1];return new e({geometry:new Uint32Array([(0,I.UJ)(o,r),(0,I.UJ)(u,r),(0,I.UJ)(o,c),(0,I.UJ)(o,c),(0,I.UJ)(u,r),(0,I.UJ)(u,c)])},new Uint32Array([0,1,2,3,4,5]),O.MX.TRIANGLES)}}]),e}(),M=n(45412),L=p.Z.getLogger("esri.views.2d.engine.webgl.ClippingInfo"),N=function(e){return parseFloat(e)/100},z=function(e){(0,s.Z)(n,e);var t=(0,u.Z)(n);function n(e,i){var o;return(0,a.Z)(this,n),(o=t.call(this))._clip=i,o._cache={},o.stage=e,o._handle=i.watch("version",(function(){return o._invalidate()})),o.ready(),o}return(0,o.Z)(n,[{key:"_destroyGL",value:function(){(0,c.pC)(this._cache.mesh)&&(this._cache.mesh.destroy(),this._cache.mesh=null),(0,c.pC)(this._cache.vao)&&(this._cache.vao.dispose(),this._cache.vao=null)}},{key:"destroy",value:function(){this._destroyGL(),this._handle.remove()}},{key:"getVAO",value:function(e,t,n,i){var a=(0,d.Z)(t.size,2),o=a[0],r=a[1];if("geometry"!==this._clip.type&&this._lastWidth===o&&this._lastHeight===r||(this._lastWidth=o,this._lastHeight=r,this._destroyGL()),(0,c.Wi)(this._cache.vao)){var l=this._createMesh(t,this._clip),s=l.getIndexBuffer(e),u=l.getVertexBuffers(e);this._cache.mesh=l,this._cache.vao=new M.U(e,n,i,u,s)}return this._cache.vao}},{key:"_createTransforms",value:function(){return{dvs:(0,f.c)()}}},{key:"_invalidate",value:function(){this._destroyGL(),this.requestRender()}},{key:"_createScreenRect",value:function(e,t){var n=(0,d.Z)(e.size,2),i=n[0],a=n[1],o="string"==typeof t.left?N(t.left)*i:t.left,r="string"==typeof t.right?N(t.right)*i:t.right,l="string"==typeof t.top?N(t.top)*a:t.top,s="string"==typeof t.bottom?N(t.bottom)*a:t.bottom,u=o,c=l;return{x:u,y:c,width:Math.max(i-r-u,0),height:Math.max(a-s-c,0)}}},{key:"_createMesh",value:function(e,t){switch(t.type){case"rect":return R.fromRect(this._createScreenRect(e,t));case"path":return R.fromPath(t);case"geometry":return R.fromGeometry(e,t);default:return L.error(new m.Z("mapview-bad-type","Unable to create ClippingInfo mesh from clip of type: ${clip.type}")),R.fromRect({x:0,y:0,width:1,height:1})}}}],[{key:"fromClipArea",value:function(e,t){return new n(e,t)}}]),n}(g.s),w=n(80613),V=function(e){(0,s.Z)(n,e);var t=(0,u.Z)(n);function n(){var e;return(0,a.Z)(this,n),(e=t.apply(this,arguments)).name=e.constructor.name,e}return(0,o.Z)(n,[{key:"clips",set:function(e){this._clips=e,this.children.forEach((function(t){return t.clips=e})),this._updateClippingInfo()}},{key:"_createTransforms",value:function(){return{dvs:(0,f.c)()}}},{key:"doRender",value:function(e){var t=this.createRenderParams(e),n=t.painter,i=t.globalOpacity,a=t.profiler,o=t.drawPhase,r=o===w.jx.LABEL||o===w.jx.HIGHLIGHT?1:i*this.computedOpacity;a.recordContainerStart(this.name),n.beforeRenderLayer(t,this._clippingInfos?255:0,r),this.updateTransforms(e.state),this.renderChildren(t),n.compositeLayer(t,r),a.recordContainerEnd()}},{key:"renderChildren",value:function(e){(0,c.Wi)(this._renderPasses)&&(this._renderPasses=this.prepareRenderPasses(e.painter));var t,n=(0,i.Z)(this.children);try{for(n.s();!(t=n.n()).done;){t.value.beforeRender(e)}}catch(u){n.e(u)}finally{n.f()}var a,o=(0,i.Z)(this._renderPasses);try{for(o.s();!(a=o.n()).done;){var r=a.value;try{r.render(e)}catch(f){}}}catch(u){o.e(u)}finally{o.f()}var l,s=(0,i.Z)(this.children);try{for(s.s();!(l=s.n()).done;){l.value.afterRender(e)}}catch(u){s.e(u)}finally{s.f()}}},{key:"createRenderParams",value:function(e){return e.requireFBO=this.requiresDedicatedFBO,e}},{key:"prepareRenderPasses",value:function(e){var t=this;return[e.registerRenderPass({name:"clip",brushes:[v.U.clip],target:function(){return t._clippingInfos},drawPhase:w.jx.MAP|w.jx.LABEL|w.jx.LABEL_ALPHA|w.jx.DEBUG|w.jx.HIGHLIGHT})]}},{key:"updateTransforms",value:function(e){var t,n=(0,i.Z)(this.children);try{for(n.s();!(t=n.n()).done;){t.value.setTransform(e)}}catch(a){n.e(a)}finally{n.f()}}},{key:"onAttach",value:function(){(0,r.Z)((0,l.Z)(n.prototype),"onAttach",this).call(this),this._updateClippingInfo()}},{key:"onDetach",value:function(){(0,r.Z)((0,l.Z)(n.prototype),"onDetach",this).call(this),this._updateClippingInfo()}},{key:"_updateClippingInfo",value:function(){var e=this;if((0,c.pC)(this._clippingInfos)&&(this._clippingInfos.forEach((function(e){return e.destroy()})),this._clippingInfos=null),this.stage){var t=this._clips;(0,c.pC)(t)&&t.length&&(this._clippingInfos=t.items.map((function(t){return z.fromClipArea(e.stage,t)}))),this.requestRender()}}}]),n}(_.W)},3886:function(e,t,n){n.d(t,{Z:function(){return r}});var i=n(37762),a=n(15671),o=n(43144),r=function(){function e(){(0,a.Z)(this,e),this.name=this.constructor.name||"UnnamedBrush"}return(0,o.Z)(e,[{key:"prepareState",value:function(e,t,n){}},{key:"draw",value:function(e,t,n){}},{key:"drawMany",value:function(e,t,n){var a,o=(0,i.Z)(t);try{for(o.s();!(a=o.n()).done;){var r=a.value;this.draw(e,r,n)}}catch(l){o.e(l)}finally{o.f()}}}]),e}()},60418:function(e,t,n){n.d(t,{Z:function(){return x}});var i=n(15671),a=n(43144),o=n(60136),r=n(54062),l=n(151),s=n(61441),u=n(3886),c=n(52120),f=n(54711),v={shaders:{vertexShader:(0,f.w)("tileInfo/tileInfo.vert"),fragmentShader:(0,f.w)("tileInfo/tileInfo.frag")},attributes:new Map([["a_pos",0]])},_=n(44070),d=n(8548),m=n(96721),p=n(51378),g=n(45412),h=300,x=function(e){(0,o.Z)(n,e);var t=(0,r.Z)(n);function n(){var e;return(0,i.Z)(this,n),(e=t.apply(this,arguments))._color=(0,l.f)(1,0,0,1),e}return(0,a.Z)(n,[{key:"dispose",value:function(){this._outlineProgram&&(this._outlineProgram.dispose(),this._outlineProgram=null),this._tileInfoProgram&&(this._tileInfoProgram.dispose(),this._tileInfoProgram=null),this._outlineVertexArrayObject&&(this._outlineVertexArrayObject.dispose(),this._outlineVertexArrayObject=null),this._tileInfoVertexArrayObject&&(this._tileInfoVertexArrayObject.dispose(),this._tileInfoVertexArrayObject=null),this._canvas=null}},{key:"prepareState",value:function(e){var t=e.context;t.setBlendingEnabled(!0),t.setBlendFunctionSeparate(d.zi.ONE,d.zi.ONE_MINUS_SRC_ALPHA,d.zi.ONE,d.zi.ONE_MINUS_SRC_ALPHA),t.setColorMask(!0,!0,!0,!0),t.setStencilWriteMask(0),t.setStencilTestEnabled(!1)}},{key:"draw",value:function(e,t){var n=e.context;if(t.isReady){this._loadWGLResources(n),n.bindVAO(this._outlineVertexArrayObject),n.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._outlineProgram.setUniform2f("u_coord_range",t.rangeX,t.rangeY),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),n.drawArrays(d.MX.LINE_STRIP,0,4);var i=this._getTexture(n,t);i?(n.bindVAO(this._tileInfoVertexArrayObject),n.useProgram(this._tileInfoProgram),n.bindTexture(i,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",t.rangeX/t.width,t.rangeY/t.height),this._tileInfoProgram.setUniform2f("u_delta",8,8),this._tileInfoProgram.setUniform2f("u_dimensions",i.descriptor.width,i.descriptor.height),n.drawArrays(d.MX.TRIANGLE_STRIP,0,4),n.bindVAO()):n.bindVAO()}}},{key:"_loadWGLResources",value:function(e){if(!this._outlineProgram||!this._tileInfoProgram){var t=(0,m.H)(e,c.O),n=(0,m.H)(e,v),i=new Int8Array([0,0,1,0,1,1,0,1]),a=_.f.createVertex(e,d.l1.STATIC_DRAW,i),o=new g.U(e,c.O.attributes,s.sy,{geometry:a}),r=new Int8Array([0,0,1,0,0,1,1,1]),l=_.f.createVertex(e,d.l1.STATIC_DRAW,r),u=new g.U(e,v.attributes,s.sy,{geometry:l});this._outlineProgram=t,this._tileInfoProgram=n,this._outlineVertexArrayObject=o,this._tileInfoVertexArrayObject=u}}},{key:"_getTexture",value:function(e,t){if(t.texture&&t.triangleCountReportedInDebug===t.triangleCount)return t.texture;t.triangleCountReportedInDebug=t.triangleCount,this._canvas||(this._canvas=document.createElement("canvas"),this._canvas.setAttribute("id","canvas2d"),this._canvas.setAttribute("width","".concat(h)),this._canvas.setAttribute("height","".concat(32)),this._canvas.setAttribute("style","display:none"));var n=t.triangleCount,i=t.key.id;t.triangleCount>0&&(i+=", ".concat(n));var a=this._canvas,o=a.getContext("2d");return o.font="24px sans-serif",o.textAlign="left",o.textBaseline="top",o.clearRect(0,0,h,32),n>1e5?(o.fillStyle="red",o.fillRect(0,0,h,32),o.fillStyle="black"):(o.clearRect(0,0,h,32),o.fillStyle="blue"),o.fillText(i,0,0),t.texture=new p.x(e,{target:d.No.TEXTURE_2D,pixelFormat:d.VI.RGBA,dataType:d.Br.UNSIGNED_BYTE,samplingMode:d.cw.NEAREST,wrapMode:d.e8.CLAMP_TO_EDGE},a),t.texture}}]),n}(u.Z)},40655:function(e,t,n){n.d(t,{Z:function(){return m}});var i=n(15671),a=n(43144),o=n(60136),r=n(54062),l=n(151),s=n(61441),u=n(3886),c=n(52120),f=n(44070),v=n(8548),_=n(96721),d=n(45412),m=function(e){(0,o.Z)(n,e);var t=(0,r.Z)(n);function n(){var e;return(0,i.Z)(this,n),(e=t.apply(this,arguments))._color=(0,l.f)(1,0,0,1),e._initialized=!1,e}return(0,a.Z)(n,[{key:"dispose",value:function(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}},{key:"prepareState",value:function(e,t){var n=e.context;n.setDepthWriteEnabled(!1),n.setDepthTestEnabled(!1),n.setStencilTestEnabled(!0),n.setBlendingEnabled(!1),n.setColorMask(!1,!1,!1,!1),n.setStencilOp(v.xS.KEEP,v.xS.KEEP,v.xS.REPLACE),n.setStencilWriteMask(255),n.setStencilFunctionSeparate(v.LR.FRONT_AND_BACK,v.wb.GREATER,t.stencilRef,255)}},{key:"draw",value:function(e,t){var n=e.context;this._initialized||this._initialize(n),n.bindVAO(this._solidVertexArrayObject),n.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._solidProgram.setUniform2fv("u_coord_range",[t.rangeX,t.rangeY]),this._solidProgram.setUniform1f("u_depth",0),this._solidProgram.setUniform4fv("u_color",this._color),n.drawArrays(v.MX.TRIANGLE_STRIP,0,4),n.bindVAO()}},{key:"_initialize",value:function(e){if(this._initialized)return!0;var t=(0,_.H)(e,c.O);if(!t)return!1;var n=new Int8Array([0,0,1,0,0,1,1,1]),i=f.f.createVertex(e,v.l1.STATIC_DRAW,n),a=new d.U(e,c.O.attributes,s.sy,{geometry:i});return this._solidProgram=t,this._solidVertexArrayObject=a,this._initialized=!0,!0}}]),n}(u.Z)},52120:function(e,t,n){n.d(t,{O:function(){return a}});var i=n(54711),a={shaders:{vertexShader:(0,i.w)("background/background.vert"),fragmentShader:(0,i.w)("background/background.frag")},attributes:new Map([["a_pos",0]])}},54711:function(e,t,n){n.d(t,{w:function(){return o}});var i={background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\ngl_FragColor = u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nlowp vec4 color = texture2D(u_tex, v_uv);\ngl_FragColor = color *  u_opacity;\n}","bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_pos, 0.0, 1.0);\nv_uv = a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\nreturn max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\nfloat vIn = rgb2v(Cb);\nvec3 hsvTint = rgb2hsv(Cs);\nvec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\nreturn hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\nreturn (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\nreturn (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\nreturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\nif (Cs <= 0.5) {\nreturn Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n}\nif (Cb <= 0.25) {\nreturn Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n}\nreturn Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\nreturn min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\nreturn max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\nreturn dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\nreturn maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\nfloat lum = lumv3(color);\nfloat mincol = minv3(color);\nfloat maxcol = maxv3(color);\nif (mincol < 0.0) {\ncolor = lum + ((color - lum) * lum) / (lum - mincol);\n}\nif (maxcol > 1.0) {\ncolor = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n}\nreturn color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\nfloat lbase = lumv3(cbase);\nfloat llum = lumv3(clum);\nfloat ldiff = llum - lbase;\nvec3 color = cbase + vec3(ldiff);\nreturn clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\nfloat minbase = minv3(cbase);\nfloat sbase = satv3(cbase);\nfloat ssat = satv3(csat);\nvec3 color;\nif (sbase > 0.0) {\ncolor = (cbase - minbase) * ssat / sbase;\n} else {\ncolor = vec3(0.0);\n}\nreturn setLum(color, clum);\n}\nvoid main() {\nvec4 src = texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\ngl_FragColor = src *  u_opacity;\n#else\nvec4 dst = texture2D(u_backbufferTexture, v_uv);\nvec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\nvec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\nfloat as = u_opacity * src.a;\nfloat ab = dst.a;\n#ifdef DESTINATION_OVER\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n#endif\n#ifdef SOURCE_IN\nvec4 color = vec4(as * Cs * ab, as * ab);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef DESTINATION_IN\nvec4 color = vec4(ab * Cb * as, ab * as);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef SOURCE_OUT\ngl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n#endif\n#ifdef DESTINATION_OUT\ngl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n#endif\n#ifdef SOURCE_ATOP\ngl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n#endif\n#ifdef DESTINATION_ATOP\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n#endif\n#ifdef XOR\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\nas * (1.0 - ab) + ab * (1.0 - as));\n#endif\n#ifdef MULTIPLY\ngl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\nas + ab * (1.0 - as));\n#endif\n#ifdef SCREEN\ngl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef OVERLAY\nvec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DARKEN\ngl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LIGHTER\ngl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\n#endif\n#ifdef LIGHTEN\ngl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_DODGE\nvec3 f = vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_BURN\nvec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HARD_LIGHT\nvec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SOFT_LIGHT\nvec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DIFFERENCE\ngl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef EXCLUSION\nvec3 f = Cs + Cb - 2.0 * Cs * Cb;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef INVERT\ngl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n#endif\n#ifdef VIVID_LIGHT\nvec3 f = vec3(vividLight(Cb.r, Cs.r),\nvividLight(Cb.g, Cs.g),\nvividLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HUE\nvec3 f = setLumSat(Cs,Cb,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SATURATION\nvec3 f = setLumSat(Cb,Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR\nvec3 f = setLum(Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LUMINOSITY\nvec3 f = setLum(Cb,Cs);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef PLUS\ngl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n#endif\n#ifdef MINUS\ngl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n#endif\n#ifdef AVERAGE\nvec3 f = (Cb + Cs) / 2.0;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef REFLECT\nvec3 f = vec3(reflectBlend(Cb.r, Cs.r),\nreflectBlend(Cb.g, Cs.g),\nreflectBlend(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#endif\n}","blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_position , 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"},dot:{dot:{"dot.frag":"precision mediump float;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nuniform highp float u_tileZoomFactor;\nvoid main()\n{\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\ngl_FragColor = v_color * alpha;\n}","dot.vert":"precision highp float;\nattribute vec2 a_pos;\nuniform sampler2D u_texture;\nuniform highp mat3 u_dvsMat3;\nuniform highp float u_tileZoomFactor;\nuniform highp float u_dotSize;\nuniform highp float u_pixelRatio;\nvarying vec2 v_pos;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nconst float EPSILON = 0.000001;\nvoid main()\n{\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\n0., -1., 0.,\n0., 1., 1.  );\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\nv_color = texture2D(u_texture, texCoords.xy);\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\nfloat z = 0.;\nz += 2.0 * step(v_color.a, EPSILON);\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\nv_dotRatio = u_dotSize / gl_PointSize;\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\n}"}},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\nfloat b = 1.0 / 6.0;\nfloat v2 = v * v;\nfloat v3 = v2 * v;\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\nfloat w3 = b * v3;\nreturn vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\nvec4 w = computeWeights(v);\nfloat g0 = w.x + w.y;\nfloat g1 = w.z + w.w;\nfloat h0 = 1.0 - (w.y / g0) + v;\nfloat h1 = 1.0 + (w.w / g1) - v;\nreturn vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\nvec2 texel = coords * texSize - 0.5;\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\nvec2 coords10 = coords + hgX.x * eX;\nvec2 coords00 = coords - hgX.y * eX;\nvec2 coords11 = coords10 + hgY.x * eY;\nvec2 coords01 = coords00 + hgY.x * eY;\ncoords10 = coords10 - hgY.y * eY;\ncoords00 = coords00 - hgY.y * eY;\nvec4 color00 = texture2D(sampler, coords00);\nvec4 color10 = texture2D(sampler, coords10);\nvec4 color01 = texture2D(sampler, coords01);\nvec4 color11 = texture2D(sampler, coords11);\ncolor00 = mix(color00, color01, hgY.z);\ncolor10 = mix(color10, color11, hgY.z);\ncolor00 = mix(color00, color10, hgX.z);\nreturn color00;\n}","bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 texelStart = floor(coords * texSize);\nvec2 coord0 = texelStart / texSize;\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\nvec4 color0 = texture2D(sampler, coord0);\nvec4 color1 = texture2D(sampler, coord1);\nvec4 color2 = texture2D(sampler, coord2);\nvec4 color3 = texture2D(sampler, coord3);\nvec2 blend = fract(coords * texSize);\nvec4 color01 = mix(color0, color1, blend.x);\nvec4 color23 = mix(color2, color3, blend.x);\nvec4 color = mix(color01, color23, blend.y);\n#ifdef NNEDGE\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\n#endif\nreturn color;\n}","epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\nvec2 invSize = 1.0 / texSize;\nvec2 texel = coords * texSize;\nvec2 texel_i = floor(texel);\nvec2 texel_frac = fract(texel);\nvec4 colorP = texture2D(sampler, texel_i * invSize);\nvec4 colorP1 = vec4(colorP);\nvec4 colorP2 = vec4(colorP);\nvec4 colorP3 = vec4(colorP);\nvec4 colorP4 = vec4(colorP);\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\ncolorP1 = colorA;\n}\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\ncolorP2 = colorB;\n}\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\ncolorP3 = colorC;\n}\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\ncolorP4 = colorD;\n}\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\nreturn mix(colorP12, colorP34, texel_frac.y);\n}"},fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include <materials/utils.glsl>\nvoid main()\n{\n#ifdef DELTA\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\nvec4 data0 = texture2D(u_maskTexture, v_texcoord);\nfloat flags = data0.r * 255.0;\nfloat groupMinZoom = data0.g * 255.0;\nfloat isVisible = getFilterBit(flags, 0);\nfloat wouldClip = step(groupMinZoom, u_zoomLevel);\nfloat direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\nfloat dt = u_timeDelta / max(u_animationTime, 0.0001);\nvec4 nextState = vec4(texel + direction * dt);\ngl_FragColor =  vec4(nextState);\n#elif defined(UPDATE)\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\ngl_FragColor = texel;\n#endif\n}","integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump float u_sigma;\nuniform sampler2D u_texture;\nmediump float gauss1(mediump vec2 dir) {\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\nreturn u_channelSelector * sample;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\nmediump float w = gauss1(i * u_direction.xy);\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\nweight += w;\n}\nvoid main(void) {\nmediump float tot = 0.0;\nmediump float weight = 0.0;\naccumGauss1(-5.0, tot, weight);\naccumGauss1(-4.0, tot, weight);\naccumGauss1(-3.0, tot, weight);\naccumGauss1(-2.0, tot, weight);\naccumGauss1(-1.0, tot, weight);\naccumGauss1(0.0, tot, weight);\naccumGauss1(1.0, tot, weight);\naccumGauss1(2.0, tot, weight);\naccumGauss1(3.0, tot, weight);\naccumGauss1(4.0, tot, weight);\naccumGauss1(5.0, tot, weight);\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}","highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump float u_sigma;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\nmediump float y = texture2D(u_texture, v_texcoord)[3];\nconst mediump float y0 = 0.5;\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\nmediump float d = (y - y0) / m0;\nreturn d;\n}\nmediump vec4 shade(mediump float d) {\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\nmediump float d = estimateDistance();\ngl_FragColor = shade(d);\n}","textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlayTexture;\nuniform bool u_maskEnabled;\nuniform bool u_overlayEnabled;\nvarying mediump vec2 v_texCoord;\nconst lowp float barrelFactor = 1.1;\nlowp vec2 barrel(lowp vec2 uv) {\nlowp vec2 uvn = uv * 2.0 - 1.0;\nif (uvn.x == 0.0 && uvn.y == 0.0) {\nreturn vec2(0.5, 0.5);\n}\nlowp float theta = atan(uvn.y, uvn.x);\nlowp float r = pow(length(uvn), barrelFactor);\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main(void)\n{\nlowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\ncolor = (color + (1.0 - color.a) * u_background);\nlowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\ncolor *= mask;\nlowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\n}","magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec4 u_drawPos;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\nv_texCoord = a_pos;\ngl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\nhighp vec3  texel = unpackDisplayIdTexel(id);\nhighp float size = float(u_attributeTextureSize);\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\nhighp float col = mod(u32, size);\nhighp float row = (u32 - col) / size;\nhighp float u = col / size;\nhighp float v = row / size;\nreturn vec2(u, v);\n}\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(u_attributeTextureSize));\n}\nhighp vec4 getAttributeData0(in highp vec3 id) {\nvec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData3, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\nbool isMagic = v.x == 255.0 && v.y == 255.0;\nif (isMagic) {\nreturn NAN_MAGIC_NUMBER;\n}\nreturn (v.x + v.y * float(0x100)) - 32768.0;\n}","constants.glsl":"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float SIGNED_BYTE_TO_UNSIGNED = 128.0;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.00001;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\nconst int BITSET_LINE_SCALE_DASH = 2;",fill:{"common.glsl":"#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\n#endif\n#ifdef DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying highp vec3 v_id;\nvarying lowp vec4 v_color;\nvarying lowp float v_opacity;\nvarying mediump vec4 v_aux1;\n#ifdef PATTERN\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef OUTLINED_FILL\nvarying lowp float v_isOutline;\n#endif\n#ifdef DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif","fill.frag":"precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#ifdef DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\n#ifdef OUTLINED_FILL\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\nlowp vec4 drawLine() {\nfloat v_lineWidth = v_aux1.x;\nvec2  v_normal    = v_aux1.yz;\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineWidth,\nv_opacity,\nv_id\n);\nreturn shadeLine(inputs);\n}\n#endif\nlowp vec4 drawFill() {\nlowp vec4 out_color = vec4(0.);\n#ifdef HITTEST\nout_color = vec4(1.0, 0.0, 0.0, 0.0);\n#elif defined(PATTERN)\nmediump vec4 v_tlbr = v_aux1;\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color = texture2D(u_texture, samplePos);\nout_color = v_opacity * v_color * color;\n#elif defined(DOT_DENSITY) && !defined(HIGHLIGHT)\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\nvec4 isPositive0 = step(0.0, difference0);\nvec4 isPositive1 = step(0.0, difference1);\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\nfloat lessThanEqZero = step(weightSum, 0.0);\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\nfloat divisor = (weightSum + lessThanEqZero);\nvec4 weights0 = difference0 * isPositive0 / divisor;\nvec4 weights1 = difference1 * isPositive1 / divisor;\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\nfloat diffMax = max(max4(difference0), max4(difference1));\nfloat lessThanZero = step(diffMax, 0.0);\nfloat greaterOrEqZero = 1.0 - lessThanZero;\nvec4 isMax0 = step(diffMax, difference0);\nvec4 isMax1 = step(diffMax, difference1);\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\nout_color = preEffectColor;\n#else\nout_color = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\nout_color.a = 1.0;\n#endif\nreturn out_color;\n}\nvoid main() {\n#ifdef OUTLINED_FILL\nif (v_isOutline > 0.5) {\ngl_FragColor = drawLine();\n} else {\ngl_FragColor = drawFill();\n}\n#else\ngl_FragColor = drawFill();\n#endif\n}","fill.vert":"#define PACKED_LINE\nprecision highp float;\nattribute float a_bitset;\n#ifdef DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_aux2;\nattribute vec4 a_aux3;\n#ifndef SIMPLE\nattribute vec4 a_aux1;\nattribute vec2 a_zoomRange;\n#else\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#endif\n#endif\nuniform vec2 u_tileOffset;\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#include <materials/fill/hittest.glsl>\n#ifdef DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\n#ifdef OUTLINED_FILL\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\nLineData outputs = buildLine(\nout_pos,\na_id,\na_pos,\na_color,\n(a_aux3.xy - 128.) / 16.,\n(a_aux3.zw - 128.) / 16.,\n0.,\na_aux2.z / 16.,\na_bitset,\nvec4(0.),\nvec2(0.),\na_aux2.w / 16.\n);\nv_id      = outputs.id;\nv_color   = outputs.color;\nv_opacity = outputs.opacity;\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\nout_color = outputs.color;\n}\n#endif\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\nfloat a_bitSet = a_bitset;\nv_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nout_color = v_color;\n#ifdef DOT_DENSITY\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\n0., -2. / 512.,  0.,\n-1.,  1.,  1.  );\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\n#else\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n#endif\n#ifdef PATTERN\nvec4  a_tlbr   = a_aux1;\nfloat a_width  = a_aux2.x;\nfloat a_height = a_aux2.y;\nvec2  a_offset = a_aux2.zw;\nvec2  a_scale  = a_aux3.xy;\nfloat a_angle  = a_aux3.z;\nvec2 scale = (1.0 / SIGNED_BYTE_TO_UNSIGNED) * a_scale;\nfloat width = u_pixelRatio * u_zoomFactor * a_width * scale.x;\nfloat height = u_pixelRatio * u_zoomFactor * a_height * scale.y;\nfloat angle = C_256_TO_RAD * a_angle;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n-sinA / width, cosA / height, 0,\n0,            0,             1);\nvec2 tileOffset = vec2(u_tileOffset.x * cosA - u_tileOffset.y * sinA, u_tileOffset.x * sinA + u_tileOffset.y * cosA);\ntileOffset = mod(tileOffset, vec2(a_aux2.x, a_aux2.y));\nvec2 symbolOffset = (a_offset - tileOffset - SIGNED_BYTE_TO_UNSIGNED) / vec2(width, height);\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\n#elif defined(DOT_DENSITY)\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n}\n#ifdef HITTEST\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\n#ifdef OUTLINED_FILL\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\nout_pos = vec3(0., 0., 2.);\nreturn;\n}\n#endif\nout_pos = hittestFill();\ngl_PointSize = 1.0;\n}\n#elif defined(OUTLINED_FILL)\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\nif (v_isOutline > 0.5) {\ndrawLine(out_color, out_pos);\n} else {\ndrawFill(out_color, out_pos);\n}\n}\n#else\n#define draw drawFill\n#endif\nvoid main()\n{\nINIT;\nlowp vec4 color = vec4(0.);\nhighp vec3 pos  = vec3(0.);\ndraw(color, pos);\ngl_Position = vec4(clip(color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nconst float EPSILON_PARALLEL = 0.05;\nbool hasSameSide(vec3 p0, vec3 p1, vec3 a, vec3 b) {\nvec3 cp0 = cross(b - a, p0 - a);\nvec3 cp1 = cross(b - a, p1 - a);\nreturn dot(cp0, cp1) >= 0.;\n}\nbool intersectPointTriangle(vec3 p, vec3 a, vec3 b, vec3 c) {\nreturn hasSameSide(p, a, b, c) && hasSameSide(p, b, a, c) && hasSameSide(p, c, a, b);\n}\nbool intersectCircleTriange(vec3 p, vec3 a, vec3 b, vec3 c, float radius) {\nvec2 ba = b.xy - a.xy;\nvec2 ca = c.xy - a.xy;\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\nbool isParallel = crossProduct < EPSILON_PARALLEL && crossProduct > -EPSILON_PARALLEL;\nif (isParallel) {\nreturn false;\n}\nif (distance(p, a) <= radius) {\nreturn true;\n}\nif (distance(p, b) <= radius) {\nreturn true;\n}\nif (distance(p, c) <= radius) {\nreturn true;\n}\nvec3 p0 = p - normalize(p - a) * radius;\nif (intersectPointTriangle(p0, a, b, c)) {\nreturn true;\n}\nvec3 p1 = p - normalize(p - b) * radius;\nif (intersectPointTriangle(p1, a, b, c)) {\nreturn true;\n}\nvec3 p2 = p - normalize(p - c) * radius;\nreturn intersectPointTriangle(p2, a, b, c);\n}\nvec3 hittestFill() {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nvec3  hittestPos = vec3(u_hittestPos, 1.);\nfloat hittestDist = u_hittestDist;\nif (!intersectCircleTriange(hittestPos, pos, pos1, pos2, hittestDist)) {\noutTextureCoords.z += 2.0;\n}\nreturn outTextureCoords;\n}\n#endif"},hittest:{"common.glsl":"#ifdef HITTEST\nuniform float u_hittestDist;\nuniform highp vec2 u_hittestPos;\n#endif"},icon:{"common.glsl":"uniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying highp float v_filters;\nvarying lowp float v_opacity;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nvec3 hittestMarker(vec2 size) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\nvec3  hittestPos = vec3(u_hittestPos, 1.);\nfloat hittestDist = u_hittestDist;\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nfloat maxHalfSize = max(size.x, size.y) / 2.;\nif (distance(pos, hittestPos) - maxHalfSize > hittestDist) {\noutTextureCoords.z += 2.0;\n}\nreturn outTextureCoords;\n}\n#endif","icon.frag":"precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/icon/common.glsl>\nuniform lowp sampler2D u_texture;\n#ifdef HITTEST\nvec4 getColor() {\nreturn vec4(1.);\n}\n#elif defined(SDF)\nvec4 getColor() {\nvec2 v_size = v_sizeTex.xy;\nvec2 v_tex  = v_sizeTex.zw;\nlowp vec4 fillPixelColor = v_color;\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\nfloat size = max(v_size.x, v_size.y);\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\nfloat outlineWidth = v_outlineWidth;\n#ifdef HIGHLIGHT\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\n#endif\nif (outlineWidth > 0.25) {\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\nfloat clampedOutlineSize = min(outlineWidth, size);\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n}\nreturn v_opacity * fillPixelColor;\n}\n#else\nvec4 getColor() {\nvec2 v_tex  = v_sizeTex.zw;\nlowp vec4 texColor = texture2D(u_texture, v_tex);\nreturn v_opacity * texColor * v_color;\n}\n#endif\nvoid main()\n{\nvec4 color = getColor();\n#ifdef HIGHLIGHT\ncolor.a = step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor = color;\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\n#include <materials/icon/hittest.glsl>\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\nvec2 outSize = baseSize;\n#ifdef VV_SIZE\nfloat r = getSize(referenceSize) / referenceSize;\noutSize.xy *= r;\noffset.xy *= r;\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\nreturn outSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nvec3  offset       = getRotation() * vec3(in_offset, 0.0);\nreturn getMatrix(isMapAligned) * offset;\n}\nvoid main()\n{\nINIT;\nvec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec2  a_offset = a_vertexOffset / 16.0;\nfloat a_outlineSize = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec2 v_size = getMarkerSize(a_offset, a_size, a_outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\nvec2 v_tex      = a_texCoords / u_mosaicSize;\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity  = getOpacity();\nv_id       = norm(a_id);\nv_filters  = getFilterFlags();\nv_pos      = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + getOffset(a_offset, a_bitSet);\nv_sizeTex  = vec4(v_size.xy, v_tex.xy);\n#ifdef SDF\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\n#ifdef VV_COLOR\nv_overridingOutlineColor = v_isThin;\n#else\nv_overridingOutlineColor = 0.0;\n#endif\nv_outlineWidth = min(a_outlineSize, max(max(v_size.x, v_size.y) - 0.99, 0.0));\nv_outlineColor = a_outlineColor;\nv_distRatio = a_bitSetAndDistRatio.y / 126.0;\n#endif\n#ifdef HITTEST\nvec3 pos = hittestMarker(v_size.xy);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, pos, v_filters, a_zoomRange), 1.0);\n#else\ngl_Position = vec4(clip(v_color, v_pos, v_filters, a_zoomRange), 1.0);\n#endif\n}"},label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include <materials/text/text.frag>","label.vert":"precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\nfloat glyphAngle = angle * 360.0 / 254.0;\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\nfloat z = 0.0;\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\nreturn z;\n}\nvoid main()\n{\nINIT;\nfloat groupMinZoom    = getMinZoom();\nfloat glyphMinZoom    = a_glyphData.x;\nfloat glyphMaxZoom    = a_glyphData.y;\nfloat glyphAngle      = a_glyphData.z;\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\nfloat fontSize           = a_texAndSize.z;\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\nv_color     = animation * ((1.0 - u_isHalo) * a_color + (u_isHalo * a_haloColor));\nv_opacity   = 1.0;\nv_tex       = a_texCoords / u_mosaicSize;\nv_edgeDistanceOffset = u_isHalo * haloSize / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\ngl_Position = vec4(v_pos, 1.0);\n#ifdef DEBUG\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}"},line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif\n#ifdef SDF\nvarying mediump float v_lineWidthRatio;\n#endif","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nbool intersectCircleLineInner(vec3 p, vec3 a, vec3 b, float radius) {\nvec3 v0 = a - p;\nvec3 b2 = b - p;\nvec3 v  = b2 - v0;\nfloat D = 4. * dot(v0, v) * dot(v0, v) - 4. * dot(v, v) * ( dot(v0, v0) - radius * radius );\nif (D < 0.) {\nreturn false;\n}\nfloat sqrtD = sqrt(D);\nfloat t0 = (-2. * dot(v0, v) + sqrtD) / (2. * dot(v, v));\nfloat t1 = (-2. * dot(v0, v) - sqrtD) / (2. * dot(v, v));\nreturn ((t0 >= 0. && t0 <= 1.) || (t1 >= 0. && t1 <= 1.));\n}\nbool intersectCircleLine(vec3 p, vec3 a, vec3 b, vec3 c, float radius) {\nreturn intersectCircleLineInner(p, a, b, radius) || intersectCircleLineInner(p, b, c, radius);\n}\nvec3 hittestLine(float halfWidth) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nvec3  hittestPos = vec3(u_hittestPos, 1.);\nfloat hittestDist = u_hittestDist;\nif (!intersectCircleLine(hittestPos, pos, pos1, pos2, hittestDist + halfWidth)) {\noutTextureCoords.z += 2.0;\n}\nreturn outTextureCoords;\n}\n#endif","line.frag":"precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/line/common.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\n#ifdef HITTEST\nvoid main() {\ngl_FragColor = vec4(1.);\n}\n#else\nvoid main() {\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineHalfWidth,\nv_opacity,\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nv_tlbr,\nv_patternSize,\n#endif\n#ifdef SDF\nv_lineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance,\n#endif\n#endif\nv_id\n);\ngl_FragColor = shadeLine(inputs);\n}\n#endif","line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/line/common.glsl>\n#include <materials/line/hittest.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\n#ifdef HITTEST\nvoid draw() {\nfloat aa        = 0.5 * u_antialiasing;\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\nfloat a_cimHalfWidth = a_aux.x / 16. ;\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\ngl_PointSize = 1.;\nvec3 pos = hittestLine(halfWidth);\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#else\nvoid draw()\n{\nhighp vec3 pos = vec3(0.);\nLineData outputs = buildLine(\npos,\na_id,\na_pos,\na_color,\na_offsetAndNormal.xy / 16.,\na_offsetAndNormal.zw / 16.,\na_accumulatedDistanceAndHalfWidth.x,\na_accumulatedDistanceAndHalfWidth.y / 16.,\na_segmentDirection.w,\na_tlbr,\na_segmentDirection.xy / 16.,\na_aux.x / 16.\n);\nv_id              = outputs.id;\nv_color           = outputs.color;\nv_normal          = outputs.normal;\nv_lineHalfWidth   = outputs.lineHalfWidth;\nv_opacity         = outputs.opacity;\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nv_tlbr          = outputs.tlbr;\nv_patternSize   = outputs.patternSize;\n#endif\n#ifdef SDF\nv_lineWidthRatio = outputs.lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance = outputs.accumulatedDistance;\n#endif\n#endif\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#endif\nvoid main() {\nINIT;\ndraw();\n}"},shared:{line:{"common.glsl":"#if !defined(OUTLINED_FILL) && defined(PATTERN)\nuniform mediump vec2 u_mosaicSize;\n#endif\nstruct LineData {\nlowp vec4 color;\nmediump vec2 normal;\nmediump float lineHalfWidth;\nlowp float opacity;\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nmediump vec4 tlbr;\nmediump vec2 patternSize;\n#endif\n#ifdef SDF\nmediump float lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nhighp float accumulatedDistance;\n#endif\n#endif\nhighp vec3 id;\n};","line.frag":"uniform lowp float u_blur;\n#if !defined(OUTLINED_FILL) && !defined(HIGHLIGHT)\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\nuniform highp float u_pixelRatio;\n#endif\n#endif\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(OUTLINED_FILL)\nlowp vec4 getLineColor(LineData line) {\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\nmediump float relativeTexX = fract(u_pixelRatio * line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\nfloat dist = d * line.lineHalfWidth;\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\n}\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(OUTLINED_FILL)\nlowp vec4 getLineColor(LineData line) {\nmediump float lineHalfWidth = line.lineHalfWidth;\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * lineHalfWidth / line.patternSize.y;\nmediump float relativeTexX = fract(u_pixelRatio * line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.5 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexY, relativeTexX));\nlowp vec4 color = texture2D(u_texture, texCoord);\nreturn line.opacity * line.color * color;\n}\n#else\nlowp vec4 getLineColor(LineData line) {\nreturn line.opacity * line.color;\n}\n#endif\nvec4 shadeLine(LineData line)\n{\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\nlowp vec4 out_color = getLineColor(line) * alpha;\n#ifdef HIGHLIGHT\nout_color.a = step(1.0 / 255.0, out_color.a);\n#endif\n#ifdef ID\nif (out_color.a < 1.0 / 255.0) {\ndiscard;\n}\nout_color = vec4(line.id, 0.0);\n#endif\nreturn out_color;\n}","line.vert":"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\n#ifdef VV_SIZE\nfloat refLineWidth = 2.0 * referenceHalfWidth;\nreturn 0.5 * (lineHalfWidth / referenceHalfWidth) * getSize(refLineWidth);\n#else\nreturn lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\nhalfWidth = max(halfWidth, 2.0);\n#endif\nreturn halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nreturn thinLineFactor * halfWidth * offset;\n}\nLineData buildLine(\nout vec3 out_pos,\nin vec3 in_id,\nin vec2 in_pos,\nin vec4 in_color,\nin vec2 in_offset,\nin vec2 in_normal,\nin float in_accumulatedDist,\nin float in_lineHalfWidth,\nin float in_bitSet,\nin vec4 in_tlbr,\nin vec2 in_segmentDirection,\nin float in_referenceHalfWidth\n)\n{\nfloat aa        = 0.5 * u_antialiasing;\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nfloat z         = 2.0 * step(baseWidth, 0.0);\nvec2  dist      = getDist(in_offset, halfWidth);\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\n#ifdef OUTLINED_FILL\nvec4  color     = in_color;\nfloat opacity   = 1.0;\n#else\nvec4  color     = getColor(in_color, in_bitSet, 0);\nfloat opacity   = getOpacity();\n#ifdef SDF\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\n#endif\n#endif\nout_pos = vec3(pos.xy, z);\nreturn LineData(\ncolor,\nin_normal,\nhalfWidth,\nopacity,\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nin_tlbr / u_mosaicSize.xyxy,\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\n#endif\n#ifdef SDF\nlineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\n#endif\n#endif\nnorm(in_id)\n);\n}"}},text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec3 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nvec3 hittestGlyph(in vec3 in_pos, in vec3 offset, in float fontSize) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * in_pos + u_tileMat3 * offset;\nvec3  hittestPos = vec3(u_hittestPos, 1.);\nfloat hittestDist = u_hittestDist;\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nfloat halfFontSize = fontSize / 2.;\nif (distance(pos, hittestPos) > hittestDist + halfFontSize) {\noutTextureCoords.z += 2.0;\n}\nreturn outTextureCoords;\n}\n#endif","text.frag":"precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\n#ifdef HITTEST\nvec4 getColor() {\nreturn vec4(1.);\n}\n#else\nvec4 getColor()\n{\nfloat SDF_CUTOFF = (2.0 / 8.0);\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\nlowp float dist = texture2D(u_texture, v_tex).a;\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\nedge /= 2.0;\n#endif\nlowp float aa = v_antialiasingWidth;\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\nreturn alpha * v_color * v_opacity;\n}\n#endif\nvoid main()\n{\ngl_FragColor = getColor();\n}","text.vert":"precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\n#include <materials/text/hittest.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_zoomRange;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\nfloat r = getSize(referenceSize) / referenceSize;\nbaseSize *= r;\noffset.xy *= r;\nreturn baseSize;\n#endif\nreturn baseSize;\n}\nvoid main()\n{\nINIT;\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\nfloat a_bitSet        = a_aux.w;\nfloat a_fontSize      = a_texFontSize.z;\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\nv_color   = u_isHalo * a_haloColor + (1.0 - u_isHalo) * getColor(a_color, a_bitSet, 1);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nv_tex     = a_texCoords / u_mosaicSize;\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\nv_edgeDistanceOffset = u_isHalo * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n#ifdef HITTEST\nvec3 pos = hittestGlyph(in_pos, offset, fontSize);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n#else\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n#endif\n}"},"utils.glsl":"float rshift(in float u32, in int amount) {\nreturn floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\nfloat offset = pow(2.0, float(bitIndex));\nreturn mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\nreturn getBit(bitset, 0);\n}\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\nfloat isAggregate = getBit(bitset.b, 7);\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\nfloat r = mod(rshift(u32, 0), 255.0);\nfloat g = mod(rshift(u32, 8), 255.0);\nfloat b = mod(rshift(u32, 16), 255.0);\nfloat a = mod(rshift(u32, 24), 255.0);\nreturn vec4(r, g, b, a);\n}\nvec3 norm(in vec3 v) {\nreturn v /= 255.0;\n}\nvec4 norm(in vec4 v) {\nreturn v /= 255.0;\n}\nfloat max4(vec4 target) {\nreturn max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\nreturn (bytes - 127.0) / 127.0;\n}","vcommon.glsl":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\nattribute vec2 a_pos;\nattribute highp vec3 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp mat3 u_tileMat3;\nuniform highp mat3 u_viewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nuniform mediump float u_currentZoom;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef OES_TEXTURE_FLOAT\ntarget.rgba = getAttributeData2(a_id);\n#else\nvec4 data0 = getAttributeData2(a_id);\nvec4 data1 = getAttributeData3(a_id);\ntarget.r = u88VVToFloat(data0.rg * 255.0);\ntarget.g = u88VVToFloat(data0.ba * 255.0);\ntarget.b = u88VVToFloat(data1.rg * 255.0);\ntarget.a = u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n#define INIT loadVisualVariableData(VV_ADATA)\n#else\n#define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\nfloat isColorLocked   = getBit(a_bitSet, index);\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\nreturn a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\nreturn 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\nreturn in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\nreturn mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\nreturn ceil(getAttributeData0(a_id).x * 255.0);\n#else\nreturn getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\nreturn getAttributeData1(a_id);\n}\nfloat getMinZoom() {\nvec4 data0 = getAttributeData0(a_id) * 255.0;\nreturn data0.g;\n}\nmat3 getMatrix(float isMapAligned) {\nreturn isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef INSIDE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#elif defined(OUTSIDE)\npos.z += 2.0 * getFilterBit(filterFlags, 1);\n#elif defined(HIGHLIGHT)\n#if !defined(HIGHLIGHT_ALL)\npos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\n#endif\n#endif\npos.z += 2.0 * (step(minMaxZoom.y, u_currentZoom) + (1.0 - step(minMaxZoom.x, u_currentZoom)));\nreturn pos;\n}","vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n#define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n#define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\nreturn (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nfloat interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\nreturn u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nif (sizeValue <= u_vvSizeFieldStopsValues[0]) {\nreturn u_vvSizeFieldStopsSizes[0];\n}\nfor (int i = 1; i < VV_SIZE_N; ++i) {\nif (u_vvSizeFieldStopsValues[i] >= sizeValue) {\nfloat f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\nreturn mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n}\n}\nreturn u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nreturn u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\nif (isNan(opacityValue)) {\nreturn 1.0;\n}\nif (opacityValue <= u_vvOpacityValues[0]) {\nreturn u_vvOpacities[0];\n}\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\nif (u_vvOpacityValues[i] >= opacityValue) {\nfloat f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\nreturn mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n}\n}\nreturn u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat4(1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat4(cosA, sinA, 0, 0,\n-sinA,  cosA, 0, 0,\n0,     0, 1, 0,\n0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat3(1, 0, 0,\n0, 1, 0,\n0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * -rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat3(cosA, -sinA, 0,\nsinA, cosA, 0,\n0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\nif (isNan(colorValue) || isColorLocked == 1.0) {\nreturn fallback;\n}\nif (colorValue <= u_vvColorValues[0]) {\nreturn u_vvColors[0];\n}\nfor (int i = 1; i < VV_COLOR_N; ++i) {\nif (u_vvColorValues[i] >= colorValue) {\nfloat f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\nreturn mix(u_vvColors[i-1], u_vvColors[i], f);\n}\n}\nreturn u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\nreturn getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\nreturn u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\nfloat outSize = getVVStopsSize(vvSize, size);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\nreturn getVVUnitValue(vvSize, size);\n#else\nreturn size;\n#endif\n}"},"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\ngl_FragColor = texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\nfloat mirrorFactor = 1.2 - factor;\nreturn mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\ngl_FragColor = u_bloomStrength * (\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n);\n}"},gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = float(SIGMA);\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\nvec4 texel = texture2D(u_texture, v_uv);\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat v = dot(texel.xyz, luma);\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\ngl_FragColor = mix(outputColor, texel, alpha);\n}"}},blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = u_sigma;\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\nfloat samples[10];\nsamples[0] = -0.08;\nsamples[1] = -0.05;\nsamples[2] = -0.03;\nsamples[3] = -0.02;\nsamples[4] = -0.01;\nsamples[5] =  0.01;\nsamples[6] =  0.02;\nsamples[7] =  0.03;\nsamples[8] =  0.05;\nsamples[9] =  0.08;\nvec2 dir = 0.5 - v_uv;\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\ndir = dir / dist;\nvec4 color = texture2D(u_colorTexture,v_uv);\nvec4 sum = color;\nfor (int i = 0; i < 10; i++) {\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n}\nsum *= 1.0 / 11.0;\nfloat t = dist * sampleStrength;\nt = clamp(t, 0.0, 1.0);\ngl_FragColor = mix(color, sum, t);\n}"}},dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\nvec4 color = texture2D(u_texture, v_uv);\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\nvec3 colorUnpremultiply = color.rgb / color.a;\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}","min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\nvec2 onePixel = vec2(1.0) / u_srcResolution;\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\nvec4 minColor = vec4(1.0);\nvec4 maxColor = vec4(0.0);\nfor (int y = 0; y < CELL_SIZE; ++y) {\nfor (int x = 0; x < CELL_SIZE; ++x) {\nvec2 offset = uv + vec2(x, y) * onePixel;\nminColor = min(minColor, texture2D(u_minTexture, offset));\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\n}\n}\ngl_FragData[0] = minColor;\ngl_FragData[1] = maxColor;\n}"}},"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nuniform vec2 u_shadowOffset;\nuniform highp mat3 u_displayViewMat3;\nvarying vec2 v_uv;\nvoid main() {\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"}},"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\nG[0] = g0,\nG[1] = g1,\nG[2] = g2,\nG[3] = g3,\nG[4] = g4,\nG[5] = g5,\nG[6] = g6,\nG[7] = g7,\nG[8] = g8;\nmat3 I;\nfloat cnv[9];\nvec3 sample;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 9; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nvec4 color = texture2D(u_colorTexture, v_uv);\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_colorTexture, v_uv);\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\nfloat a = color.a;\ngl_FragColor = vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"}},raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\nvec4 color = texture2D(u_texture, v_texcoord);\n#endif\nfloat alpha = u_opacity * color.a;\ngl_FragColor = vec4(alpha * color.rgb, alpha);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_isFloatTexture;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\n#ifdef BILINEAR\n#include <filtering/bilinear.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\ntargetLocation = projectPixelLocation(targetLocation);\n#endif\nreturn targetLocation;\n}\nbool isOutside(vec2 coords){\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\nreturn true;\n} else {\nreturn false;\n}\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#elif defined(BILINEAR)\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\n#else\nvec4 color = texture2D(u_image, pixelLocation);\n#endif\nreturn color;\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\nfloat maxI = 255.0;\nfloat mid = 128.0;\nfloat c = u_contrastOffset;\nfloat b = u_brightnessOffset;\nvec4 v;\nif (c > 0.0 && c < 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n} else if (c <= 0.0 && c > -100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n} else if (c == 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\nv = (sign(v) + 1.0) / 2.0;\n} else if (c == -100.0) {\nv = vec4(mid, mid, mid, currentPixel.a);\n}\nreturn vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\n#ifdef LOOKUP_PROJECTION\nvec4 pv = texture2D(u_transformGrid, coords);\nreturn vec2(pv.r, pv.g);\n#endif\nvec2 index_image = floor(coords * u_targetImageSize);\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\nvec2 srcLocation;\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\nif (pos.s <= pos.t) {\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n} else {\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n}\nreturn srcLocation;\n}"},flow:{"flow.frag":"precision highp float;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_lineColor;\nvarying float v_lineRenderWidth;\nuniform float u_time;\nuniform float u_fadeDuration;\nuniform float u_lineSpeed;\nvoid main(void) {\nvec4 color = v_lineColor;\nfloat edgeWidth = min(2.0 * v_lineRenderWidth - 1.0, 1.0);\nfloat edgeStart = (v_lineRenderWidth - edgeWidth) / v_lineRenderWidth;\nif (edgeStart < 0.95) {\nfloat s = step(edgeStart, abs(v_side));\ncolor.a *= (1.0 - s) + s * (1.0 - (abs(v_side) - edgeStart) / (1.0 - edgeStart));\n}\nfloat t = mod(v_timeSeed * (v_totalTime + u_fadeDuration) + u_time * u_lineSpeed, v_totalTime + u_fadeDuration) - v_time;\ncolor.a *= step(0.0, t) * exp(-2.3 * t / u_fadeDuration);\ncolor.rgb *= color.a;\ngl_FragColor = color;\n}","flow.vert":"precision highp float;\nattribute vec3 a_positionAndSide;\nattribute vec3 a_timeInfo;\nattribute vec2 a_extrude;\nattribute float a_speed;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_lineColor;\nvarying float v_lineRenderWidth;\n#define MAX_STOPS 8\n#ifdef VV_LINE_COLOR\nuniform float u_lineColor_stops[MAX_STOPS];\nuniform vec4 u_lineColor_values[MAX_STOPS];\nuniform int u_lineColor_count;\n#else\nuniform vec4 u_lineColor;\n#endif\n#ifdef VV_LINE_OPACITY\nuniform float u_lineOpacity_stops[MAX_STOPS];\nuniform float u_lineOpacity_values[MAX_STOPS];\nuniform int u_lineOpacity_count;\n#else\nuniform float u_lineOpacity;\n#endif\n#ifdef VV_LINE_RENDER_WIDTH\nuniform float u_lineRenderWidth_stops[MAX_STOPS];\nuniform float u_lineRenderWidth_values[MAX_STOPS];\nuniform int u_lineRenderWidth_count;\n#else\nuniform float u_lineRenderWidth;\n#endif\nvoid main(void) {\nfloat x = a_speed;\n#ifdef VV_LINE_COLOR\nvec4 lineColor = u_lineColor_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_lineColor_count) {\nbreak;\n}\nfloat x1 = u_lineColor_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_lineColor_stops[i];\nvec4 y2 = u_lineColor_values[i];\nif (x < x2) {\nvec4 y1 = u_lineColor_values[i - 1];\nlineColor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nlineColor = y2;\n}\n}\n}\n#else\nvec4 lineColor = u_lineColor;\n#endif\n#ifdef VV_LINE_OPACITY\nfloat lineOpacity = u_lineOpacity_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_lineOpacity_count) {\nbreak;\n}\nfloat x1 = u_lineOpacity_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_lineOpacity_stops[i];\nfloat y2 = u_lineOpacity_values[i];\nif (x < x2) {\nfloat y1 = u_lineOpacity_values[i - 1];\nlineOpacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nlineOpacity = y2;\n}\n}\n}\n#else\nfloat lineOpacity = u_lineOpacity;\n#endif\n#ifdef VV_LINE_RENDER_WIDTH\nfloat lineRenderWidth = u_lineRenderWidth_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_lineRenderWidth_count) {\nbreak;\n}\nfloat x1 = u_lineRenderWidth_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_lineRenderWidth_stops[i];\nfloat y2 = u_lineRenderWidth_values[i];\nif (x < x2) {\nfloat y1 = u_lineRenderWidth_values[i - 1];\nlineRenderWidth = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nlineRenderWidth = y2;\n}\n}\n}\n#else\nfloat lineRenderWidth = u_lineRenderWidth;\n#endif\nvec2 position = a_positionAndSide.xy;\nfloat side = a_positionAndSide.z;\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineRenderWidth, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_side = side;\nv_time = a_timeInfo.x;\nv_totalTime = a_timeInfo.y;\nv_timeSeed = a_timeInfo.z;\nv_lineColor = vec4(lineColor.rgb, lineColor.a * lineOpacity);\nv_lineRenderWidth = lineRenderWidth;\n}"},hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include <raster/lut/colorize.glsl>\nfloat getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){\nif (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {\nreturn 0.0;\n}\nelse {\nreturn e;\n}\n}\nvec3 rgb2hsv(vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\nvec3 hsv = rgb2hsv(rgb.xyz);\nhsv.z = hillshade;\nreturn vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nif (currentPixel.a == 0.0) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec2 axy = vec2(-1.0, -1.0);\nvec2 bxy = vec2(0.0, -1.0);\nvec2 cxy = vec2(1.0, -1.0);\nvec2 dxy = vec2(-1.0, 0.0);\nvec2 fxy = vec2(1.0, 0.0);\nvec2 gxy = vec2(-1.0, 1.0);\nvec2 hxy = vec2(0.0, 1.0);\nvec2 ixy = vec2(1.0, 1.0);\nvec2 onePixel = 1.0 / u_srcImageSize;\nif (pixelLocation.s < onePixel.s) {\naxy[0] = 1.0;\ndxy[0] = 1.0;\ngxy[0] = 1.0;\n}\nif (pixelLocation.t < onePixel.t) {\naxy[1] = 1.0;\nbxy[1] = 1.0;\ncxy[1] = 1.0;\n}\nif (pixelLocation.s > 1.0 - onePixel.s) {\ncxy[0] = -1.0;\nfxy[0] = -1.0;\nixy[0] = -1.0;\n}\nif (pixelLocation.t > 1.0 - onePixel.t) {\ngxy[1] = -1.0;\nhxy[1] = -1.0;\nixy[1] = -1.0;\n}\nvec4 va = texture2D(u_image, pixelLocation + onePixel * axy);\nvec4 vb = texture2D(u_image, pixelLocation + onePixel * bxy);\nvec4 vc = texture2D(u_image, pixelLocation + onePixel * cxy);\nvec4 vd = texture2D(u_image, pixelLocation + onePixel * dxy);\nvec4 ve = texture2D(u_image, pixelLocation);\nvec4 vf = texture2D(u_image, pixelLocation + onePixel * fxy);\nvec4 vg = texture2D(u_image, pixelLocation + onePixel * gxy);\nvec4 vh = texture2D(u_image, pixelLocation + onePixel * hxy);\nvec4 vi = texture2D(u_image, pixelLocation + onePixel * ixy);\nfloat dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_factor.s;\nfloat dzy = (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_factor.t;\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\nfloat hillshade = 0.0;\nif (u_hillshadeType == 0){\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\nif (z < 0.0)  z = 0.0;\nhillshade = z;\n} else {\nfor (int k = 0; k < 6; k++) {\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\nif (z < 0.0) z = 0.0;\nhillshade = hillshade + z * u_weights[k];\nif (k == 5) break;\n}\n}\nfloat alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);\n#ifdef APPLY_COLORMAP\ngl_FragColor = overlay(ve.r, u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\ngl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}","hillshade.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\nvec4 color = texture2D(u_colormap, clrPosition);\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\nreturn result;\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nvec4 result = colorize(currentPixel, 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}","lut.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},magdir:{"magdir.frag":"precision mediump float;\nvarying vec4 v_color;\nuniform lowp float u_opacity;\nvoid main() {\ngl_FragColor = v_color * u_opacity;\n}","magdir.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nuniform float u_rotation;\nuniform vec4 u_colors[12];\nvarying vec4 v_color;\nvoid main()\n{\nfloat angle = a_offset.y + u_rotation;\n#ifndef ROTATION_GEOGRAPHIC\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\n#endif\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\nv_color = u_colors[int(a_vv.x)];\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},reproject:{"reproject.frag":"precision mediump float;\nvarying vec2 v_texcoord;\n#include <raster/common/common.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\n}","reproject.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_position;\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\n}"},scalar:{"scalar.frag":"precision mediump float;\nuniform lowp float u_opacity;\nvarying vec2 v_pos;\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\nconst float outlineSize = 0.02;\nconst float innerRadius = 0.25;\nconst float outerRadius = 0.42;\nconst float innerSquareLength = 0.15;\nvoid main() {\nmediump float dist = length(v_pos);\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\n#ifdef INNER_CIRCLE\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\n#else\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\n#endif\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\n}","scalar.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nvarying vec2 v_pos;\nvoid main()\n{\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 size = u_symbolSize * sizePercentage;\nvec2 pos = a_pos + a_offset * size;\nv_pos = a_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\nif (val >= maxCutOff) {\nreturn maxOutput;\n} else if (val <= minCutOff) {\nreturn minOutput;\n}\nfloat stretchedVal;\nif (useGamma) {\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\nif (gamma > 1.0) {\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n}\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n} else {\nstretchedVal = minOutput + (val - minCutOff) * factor;\n}\nreturn stretchedVal;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\n#ifdef NOOP\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\nreturn;\n#endif\nif (u_bandCount == 1) {\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n} else {\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n}\n}","stretch.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},stencil:{"stencil.frag":"void main() {\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nvoid main() {\ngl_Position = vec4(a_pos, 0.0, 1.0);\n}"},tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\nlowp vec4 color = texture2D(u_texture, v_tex);\ngl_FragColor = 0.75 * color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\nv_tex = a_pos;\n}"},util:{"encoding.glsl":"const vec4 rgba2float_factors = vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, rgba2float_factors);\n}"}};var a=new(n(56648).B)((function(e){var t=i;return e.split("/").forEach((function(e){t&&(t=t[e])})),t}));function o(e){return a.resolveIncludes(e)}},48673:function(e,t,n){n.d(t,{Br:function(){return s},Fm:function(){return d},N9:function(){return p},RA:function(){return g},Tc:function(){return c},Ue:function(){return f},iC:function(){return u},s9:function(){return l},v:function(){return m},xW:function(){return _},zS:function(){return v}});var i=n(29439),a=n(49800),o=n(8548),r=(n(53634),n(51378));function l(e,t){var n,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"nearest",l=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=!(l&&"u8"===t.pixelType),u=s?o.Br.FLOAT:o.Br.UNSIGNED_BYTE,c=null==t.pixels||0===t.pixels.length?null:s?t.getAsRGBAFloat():t.getAsRGBA(),f=null==(n=e.capabilities.textureFloat)?void 0:n.textureFloatLinear,v={width:t.width,height:t.height,target:o.No.TEXTURE_2D,pixelFormat:o.VI.RGBA,internalFormat:e.type===a.zO.WEBGL2&&s?o.lP.RGBA32F:o.VI.RGBA,samplingMode:!f||"bilinear"!==i&&"cubic"!==i?o.cw.NEAREST:o.cw.LINEAR,dataType:u,wrapMode:o.e8.CLAMP_TO_EDGE,flipped:!1};return new r.x(e,v,c)}function s(e,t){var n=t.spacing,l=t.offsets,s=t.coefficients,u=(0,i.Z)(t.size,2),c=u[0],f=u[1],v=n[0]>1,_={width:v?4*c:c,height:f,target:o.No.TEXTURE_2D,pixelFormat:o.VI.RGBA,internalFormat:e.type===a.zO.WEBGL2?o.lP.RGBA32F:o.VI.RGBA,dataType:o.Br.FLOAT,samplingMode:o.cw.NEAREST,wrapMode:o.e8.CLAMP_TO_EDGE,flipped:!1},d=new Float32Array(v?c*f*16:2*l.length);if(v)for(var m=0,p=0;m<s.length;m++)d[p++]=s[m],m%3==2&&(d[p++]=1);else for(var g=0;g<f;g++)for(var h=0;h<c;h++){var x=4*(g*c+h),y=2*(h*f+g);d[x]=l[y],d[x+1]=l[y+1],d[x+3]=-1===l[y]?0:1}return new r.x(e,_,d)}function u(e,t){var n={width:t.length/4,height:1,target:o.No.TEXTURE_2D,pixelFormat:o.VI.RGBA,internalFormat:o.VI.RGBA,dataType:o.Br.UNSIGNED_BYTE,samplingMode:o.cw.NEAREST,wrapMode:o.e8.CLAMP_TO_EDGE,flipped:!1};return new r.x(e,n,t)}function c(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,a=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],o=arguments.length>5&&void 0!==arguments[5]&&arguments[5];return{u_flipY:a,u_isFloatTexture:o,u_applyTransform:!!e,u_opacity:i,u_transformSpacing:e?e.spacing:null,u_transformGridSize:e?e.size:null,u_targetImageSize:t,u_srcImageSize:n}}function f(e,t){return{u_colormapOffset:t||0,u_colormapMaxIndex:e?e.length/4-1:null}}function v(e,t){return{u_scale:e,u_offset:t}}function _(e){return{u_bandCount:e.bandCount,u_minOutput:e.outMin,u_maxOutput:e.outMax,u_minCutOff:e.minCutOff,u_maxCutOff:e.maxCutOff,u_factor:e.factor,u_useGamma:e.useGamma,u_gamma:e.gamma,u_gammaCorrection:e.gammaCorrection}}function d(e){return{u_hillshadeType:e.hillshadeType,u_sinZcosAs:e.sinZcosAs,u_sinZsinAs:e.sinZsinAs,u_cosZs:e.cosZs,u_weights:e.weights,u_factor:e.factor,u_minValue:e.minValue,u_maxValue:e.maxValue}}function m(e,t){for(var n,i=e.gl,a=t.glName,o=i.getProgramParameter(a,i.ACTIVE_UNIFORMS),r=new Map,l=0;l<o;l++)(n=i.getActiveUniform(a,l))&&r.set(n.name,{location:i.getUniformLocation(a,n.name),info:n});return r}function p(e,t,n){Object.keys(n).forEach((function(i){var a=t.get(i)||t.get(i+"[0]");a&&function(e,t,n,i){if(null===i||null==n)return!1;var a=i.info;switch(a.type){case o.Se.FLOAT:a.size>1?e.setUniform1fv(t,n):e.setUniform1f(t,n);break;case o.Se.FLOAT_VEC2:e.setUniform2fv(t,n);break;case o.Se.FLOAT_VEC3:e.setUniform3fv(t,n);break;case o.Se.FLOAT_VEC4:e.setUniform4fv(t,n);break;case o.Se.FLOAT_MAT3:e.setUniformMatrix3fv(t,n);break;case o.Se.FLOAT_MAT4:e.setUniformMatrix4fv(t,n);break;case o.Se.INT:a.size>1?e.setUniform1iv(t,n):e.setUniform1i(t,n);break;case o.Se.BOOL:e.setUniform1i(t,n?1:0);break;case o.Se.INT_VEC2:case o.Se.BOOL_VEC2:e.setUniform2iv(t,n);break;case o.Se.INT_VEC3:case o.Se.BOOL_VEC3:e.setUniform3iv(t,n);break;case o.Se.INT_VEC4:case o.Se.BOOL_VEC4:e.setUniform4iv(t,n);break;default:return!1}}(e,i,n[i],a)}))}function g(e,t,n,i){n.length===i.length&&(i.some((function(e){return null==e}))||n.some((function(e){return null==e}))||n.forEach((function(n,a){t.setUniform1i(n,a),e.bindTexture(i[a],a)})))}}}]);
//# sourceMappingURL=4510.4fae3ffa.chunk.js.map